<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JDBC</title>
    <link href="/2023/01/11/JDBC/"/>
    <url>/2023/01/11/JDBC/</url>
    
    <content type="html"><![CDATA[<h1 id="JDBC核心技术"><a href="#JDBC核心技术" class="headerlink" title="JDBC核心技术"></a>JDBC核心技术</h1><hr><h2 id="第1章：JDBC概述"><a href="#第1章：JDBC概述" class="headerlink" title="第1章：JDBC概述"></a>第1章：JDBC概述</h2><h3 id="1-1-数据的持久化"><a href="#1-1-数据的持久化" class="headerlink" title="1.1 数据的持久化"></a>1.1 数据的持久化</h3><ul><li><p>持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘</strong>上加以”固化”<strong>，而持久化的实现过程大多通过各种关系数据库来完成</strong>。</p></li><li><p>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。</p><p><img src="/JDBC/1566741430592.png" alt="1566741430592"></p></li></ul><h3 id="1-2-Java中的数据存储技术"><a href="#1-2-Java中的数据存储技术" class="headerlink" title="1.2 Java中的数据存储技术"></a>1.2 Java中的数据存储技术</h3><ul><li><p>在Java中，数据库存取技术可分为如下几类：</p><ul><li><p><strong>JDBC</strong>直接访问数据库</p></li><li><p>JDO (Java Data Object )技术</p></li><li><p><strong>第三方O&#x2F;R工具</strong>，如Hibernate, Mybatis 等</p></li></ul></li><li><p>JDBC是java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC。</p></li></ul><h3 id="1-3-JDBC介绍"><a href="#1-3-JDBC介绍" class="headerlink" title="1.3 JDBC介绍"></a>1.3 JDBC介绍</h3><ul><li>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，（<strong>java.sql,javax.sql</strong>）使用这些类库可以以一种<strong>标准</strong>的方法、方便地访问数据库资源。</li><li>JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</li><li>JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</li><li>如果没有JDBC，那么Java程序访问数据库时是这样的：</li></ul><p><img src="/JDBC/1555575760234.png" alt="1555575760234"></p><hr><ul><li>有了JDBC，Java程序访问数据库时是这样的：</li></ul><p><img src="/JDBC/1555575981203.png" alt="1555575981203"></p><hr><ul><li>总结如下：</li></ul><p><img src="/JDBC/1566741692804.png" alt="1566741692804"></p><h3 id="1-4-JDBC体系结构"><a href="#1-4-JDBC体系结构" class="headerlink" title="1.4 JDBC体系结构"></a>1.4 JDBC体系结构</h3><ul><li>JDBC接口（API）包括两个层次：<ul><li><strong>面向应用的API</strong>：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）。</li><li><strong>面向数据库的API</strong>：Java Driver API，供开发商开发数据库驱动程序用。</li></ul></li></ul><blockquote><p><strong>JDBC是sun公司提供一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</strong></p><p><strong>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。————面向接口编程</strong></p></blockquote><h3 id="1-5-JDBC程序编写步骤"><a href="#1-5-JDBC程序编写步骤" class="headerlink" title="1.5 JDBC程序编写步骤"></a>1.5 JDBC程序编写步骤</h3><p><img src="/JDBC/1565969323908.png" alt="1565969323908"></p><blockquote><p>补充：ODBC(<strong>Open Database Connectivity</strong>，开放式数据库连接)，是微软在Windows平台下推出的。使用者在程序中只需要调用ODBC API，由 ODBC 驱动程序将调用转换成为对特定的数据库的调用请求。</p></blockquote><h2 id="第2章：获取数据库连接"><a href="#第2章：获取数据库连接" class="headerlink" title="第2章：获取数据库连接"></a>第2章：获取数据库连接</h2><h3 id="2-1-要素一：Driver接口实现类"><a href="#2-1-要素一：Driver接口实现类" class="headerlink" title="2.1 要素一：Driver接口实现类"></a>2.1 要素一：Driver接口实现类</h3><h4 id="2-1-1-Driver接口介绍"><a href="#2-1-1-Driver接口介绍" class="headerlink" title="2.1.1 Driver接口介绍"></a>2.1.1 Driver接口介绍</h4><ul><li><p>java.sql.Driver 接口是所有 JDBC 驱动程序需要实现的接口。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。</p></li><li><p>在程序中不需要直接去访问实现了 Driver 接口的类，而是由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver实现。</p><ul><li>Oracle的驱动：<strong>oracle.jdbc.driver.OracleDriver</strong></li><li>mySql的驱动： <strong>com.mysql.jdbc.Driver</strong></li></ul></li></ul><p><img src="/JDBC/1555576157618.png" alt="1555576157618"></p><p><img src="/JDBC/1555576170074.png" alt="1555576170074"></p><ul><li>将上述jar包拷贝到Java工程的一个目录中，习惯上新建一个lib文件夹。</li></ul><p> <img src="/JDBC/1566134718955.png" alt="1566134718955"></p><p>在驱动jar上右键–&gt;Build Path–&gt;Add to Build Path</p><p> <img src="/JDBC/1566134781682.png" alt="1566134781682"></p><p>注意：如果是Dynamic Web Project（动态的web项目）话，则是把驱动jar放到WebContent（有的开发工具叫WebRoot）目录中的WEB-INF目录中的lib目录下即可</p><p> <img src="/JDBC/1566135290460.png" alt="1566135290460"></p><h4 id="2-1-2-加载与注册JDBC驱动"><a href="#2-1-2-加载与注册JDBC驱动" class="headerlink" title="2.1.2 加载与注册JDBC驱动"></a>2.1.2 加载与注册JDBC驱动</h4><ul><li><p>加载驱动：加载 JDBC 驱动需调用 Class 类的静态方法 forName()，向其传递要加载的 JDBC 驱动的类名</p><ul><li><strong>Class.forName(“com.mysql.jdbc.Driver”);</strong></li></ul></li><li><p>注册驱动：DriverManager 类是驱动程序管理器类，负责管理驱动程序</p><ul><li><p><strong>使用DriverManager.registerDriver(com.mysql.jdbc.Driver)来注册驱动</strong></p></li><li><p>通常不用显式调用 DriverManager 类的 registerDriver() 方法来注册驱动程序类的实例，因为 Driver 接口的驱动程序类<strong>都</strong>包含了静态代码块，在这个静态代码块中，会调用 DriverManager.registerDriver() 方法来注册自身的一个实例。下图是MySQL的Driver实现类的源码：</p><p><img src="/JDBC/1566136831283.png" alt="1566136831283"></p></li></ul></li></ul><h3 id="2-2-要素二：URL"><a href="#2-2-要素二：URL" class="headerlink" title="2.2 要素二：URL"></a>2.2 要素二：URL</h3><ul><li><p>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。</p></li><li><p>JDBC URL的标准由三部分组成，各部分间用冒号分隔。 </p><ul><li><strong>jdbc:子协议:子名称</strong></li><li><strong>协议</strong>：JDBC URL中的协议总是jdbc </li><li><strong>子协议</strong>：子协议用于标识一个数据库驱动程序</li><li><strong>子名称</strong>：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了<strong>定位数据库</strong>提供足够的信息。包含<strong>主机名</strong>(对应服务端的ip地址)<strong>，端口号，数据库名</strong></li></ul></li><li><p>举例：</p><p><img src="/JDBC/1555576477107.png" alt="1555576477107"></p></li><li><p><strong>几种常用数据库的 JDBC URL</strong></p><ul><li><p>MySQL的连接URL编写方式：</p><ul><li>jdbc:mysql:&#x2F;&#x2F;主机名称:mysql服务端口号&#x2F;数据库名称?参数&#x3D;值&amp;参数&#x3D;值</li><li>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;atguigu</li><li>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;atguigu**?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8**（如果JDBC程序与服务器端的字符集不一致，会导致乱码，那么可以通过参数指定服务器端的字符集）</li><li>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;atguigu?user&#x3D;root&amp;password&#x3D;123456</li></ul></li><li><p>Oracle 9i的连接URL编写方式：</p><ul><li>jdbc:oracle:thin:@主机名称:oracle服务端口号:数据库名称</li><li>jdbc:oracle:thin:@localhost:1521:atguigu</li></ul></li><li><p>SQLServer的连接URL编写方式：</p><ul><li><p>jdbc:sqlserver:&#x2F;&#x2F;主机名称:sqlserver服务端口号:DatabaseName&#x3D;数据库名称</p></li><li><p>jdbc:sqlserver:&#x2F;&#x2F;localhost:1433:DatabaseName&#x3D;atguigu</p></li></ul></li></ul></li></ul><h3 id="2-3-要素三：用户名和密码"><a href="#2-3-要素三：用户名和密码" class="headerlink" title="2.3 要素三：用户名和密码"></a>2.3 要素三：用户名和密码</h3><ul><li>user,password可以用“属性名&#x3D;属性值”方式告诉数据库</li><li>可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接</li></ul><h3 id="2-4-数据库连接方式举例"><a href="#2-4-数据库连接方式举例" class="headerlink" title="2.4 数据库连接方式举例"></a>2.4 数据库连接方式举例</h3><h4 id="2-4-1-连接方式一"><a href="#2-4-1-连接方式一" class="headerlink" title="2.4.1 连接方式一"></a>2.4.1 连接方式一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection1</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">//1.提供java.sql.Driver接口实现类的对象</span><br>           <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>           driver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.mysql.jdbc.Driver();<br><br>           <span class="hljs-comment">//2.提供url，指明具体操作的数据</span><br>           <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;<br><br>           <span class="hljs-comment">//3.提供Properties的对象，指明用户名和密码</span><br>           <span class="hljs-type">Properties</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>           info.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>           info.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;abc123&quot;</span>);<br><br>           <span class="hljs-comment">//4.调用driver的connect()，获取连接</span><br>           <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> driver.connect(url, info);<br>           System.out.println(conn);<br>       &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>           e.printStackTrace();<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：上述代码中显式出现了第三方数据库的API</p></blockquote><h4 id="2-4-2-连接方式二"><a href="#2-4-2-连接方式二" class="headerlink" title="2.4.2 连接方式二"></a>2.4.2 连接方式二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection2</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">//1.实例化Driver</span><br>           <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br>           <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(className);<br>           <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> (Driver) clazz.newInstance();<br><br>           <span class="hljs-comment">//2.提供url，指明具体操作的数据</span><br>           <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;<br><br>           <span class="hljs-comment">//3.提供Properties的对象，指明用户名和密码</span><br>           <span class="hljs-type">Properties</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>           info.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>);<br>           info.setProperty(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;abc123&quot;</span>);<br><br>           <span class="hljs-comment">//4.调用driver的connect()，获取连接</span><br>           <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> driver.connect(url, info);<br>           System.out.println(conn);<br><br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           e.printStackTrace();<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：相较于方式一，这里使用反射实例化Driver，不在代码中体现第三方数据库的API。体现了面向接口编程思想。</p></blockquote><h4 id="2-4-3-连接方式三"><a href="#2-4-3-连接方式三" class="headerlink" title="2.4.3 连接方式三"></a>2.4.3 连接方式三</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection3</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">//1.数据库连接的4个基本要素：</span><br>           <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc123&quot;</span>;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">driverName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br><br>           <span class="hljs-comment">//2.实例化Driver</span><br>           <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(driverName);<br>           <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> (Driver) clazz.newInstance();<br>           <span class="hljs-comment">//3.注册驱动</span><br>           DriverManager.registerDriver(driver);<br>           <span class="hljs-comment">//4.获取连接</span><br>           <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br>           System.out.println(conn);<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           e.printStackTrace();<br>       &#125;<br><br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：使用DriverManager实现数据库的连接。体会获取连接必要的4个基本要素。</p></blockquote><h4 id="2-4-4-连接方式四"><a href="#2-4-4-连接方式四" class="headerlink" title="2.4.4 连接方式四"></a>2.4.4 连接方式四</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection4</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">//1.数据库连接的4个基本要素：</span><br>           <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc123&quot;</span>;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">driverName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br><br>           <span class="hljs-comment">//2.加载驱动 （①实例化Driver ②注册驱动）</span><br>           Class.forName(driverName);<br><br><br>           <span class="hljs-comment">//Driver driver = (Driver) clazz.newInstance();</span><br>           <span class="hljs-comment">//3.注册驱动</span><br>           <span class="hljs-comment">//DriverManager.registerDriver(driver);</span><br>           <span class="hljs-comment">/*</span><br><span class="hljs-comment">           可以注释掉上述代码的原因，是因为在mysql的Driver类中声明有：</span><br><span class="hljs-comment">           static &#123;</span><br><span class="hljs-comment">               try &#123;</span><br><span class="hljs-comment">                   DriverManager.registerDriver(new Driver());</span><br><span class="hljs-comment">               &#125; catch (SQLException var1) &#123;</span><br><span class="hljs-comment">                   throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span><br><span class="hljs-comment">               &#125;</span><br><span class="hljs-comment">           &#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            */</span><br><br><br>           <span class="hljs-comment">//3.获取连接</span><br>           <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br>           System.out.println(conn);<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           e.printStackTrace();<br>       &#125;<br><br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：不必显式的注册驱动了。因为在DriverManager的源码中已经存在静态代码块，实现了驱动的注册。</p></blockquote><h4 id="2-4-5-连接方式五-最终版"><a href="#2-4-5-连接方式五-最终版" class="headerlink" title="2.4.5 连接方式五(最终版)"></a>2.4.5 连接方式五(最终版)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection5</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   <span class="hljs-comment">//1.加载配置文件</span><br>       <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> ConnectionTest.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);<br>       <span class="hljs-type">Properties</span> <span class="hljs-variable">pros</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>       pros.load(is);<br>       <br>       <span class="hljs-comment">//2.读取配置信息</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>       <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>       <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>       <span class="hljs-type">String</span> <span class="hljs-variable">driverClass</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;driverClass&quot;</span>);<br><br>       <span class="hljs-comment">//3.加载驱动</span><br>       Class.forName(driverClass);<br><br>       <span class="hljs-comment">//4.获取连接</span><br>       <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,user,password);<br>       System.out.println(conn);<br><br>   &#125;<br></code></pre></td></tr></table></figure><p>其中，配置文件声明在工程的src目录下：【jdbc.properties】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">user</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">abc123</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/test</span><br><span class="hljs-attr">driverClass</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br></code></pre></td></tr></table></figure><blockquote><p>说明：使用配置文件的方式保存配置信息，在代码中加载配置文件</p><p><strong>使用配置文件的好处：</strong></p><p>①实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码<br>②如果修改了配置信息，省去重新编译的过程。</p></blockquote><h2 id="第3章：使用PreparedStatement实现CRUD操作"><a href="#第3章：使用PreparedStatement实现CRUD操作" class="headerlink" title="第3章：使用PreparedStatement实现CRUD操作"></a>第3章：使用PreparedStatement实现CRUD操作</h2><h3 id="3-1-操作和访问数据库"><a href="#3-1-操作和访问数据库" class="headerlink" title="3.1 操作和访问数据库"></a>3.1 操作和访问数据库</h3><ul><li><p>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。</p></li><li><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。 </li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul><p><img src="/JDBC/1566573842140.png" alt="1566573842140"></p></li></ul><h3 id="3-2-使用Statement操作数据表的弊端"><a href="#3-2-使用Statement操作数据表的弊端" class="headerlink" title="3.2 使用Statement操作数据表的弊端"></a>3.2 使用Statement操作数据表的弊端</h3><ul><li><p>通过调用 Connection 对象的 createStatement() 方法创建该对象。该对象用于执行静态的 SQL 语句，并且返回执行结果。</p></li><li><p>Statement 接口中定义了下列方法用于执行 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-type">int</span> excuteUpdate(String <span class="hljs-keyword">sql</span>)：执行更新操作<span class="hljs-keyword">INSERT</span>、<span class="hljs-keyword">UPDATE</span>、<span class="hljs-keyword">DELETE</span><br>ResultSet executeQuery(String <span class="hljs-keyword">sql</span>)：执行查询操作<span class="hljs-keyword">SELECT</span><br></code></pre></td></tr></table></figure></li><li><p>但是使用Statement操作数据表存在弊端：</p><ul><li><strong>问题一：存在拼串操作，繁琐</strong></li><li><strong>问题二：存在SQL注入问题</strong></li></ul></li><li><p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令(如：SELECT user, password FROM user_table WHERE user&#x3D;’a’ OR 1 &#x3D; ‘ AND password &#x3D; ‘ OR ‘1’ &#x3D; ‘1’) ，从而利用系统的 SQL 引擎完成恶意行为的做法。</p></li><li><p>对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement(从Statement扩展而来) 取代 Statement 就可以了。</p></li><li><p>代码演示：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StatementTest</span> &#123;<br><br><span class="hljs-comment">// 使用Statement的弊端：需要拼写sql语句，并且存在SQL注入的问题</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLogin</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>System.out.print(<span class="hljs-string">&quot;用户名：&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> scan.nextLine();<br>System.out.print(<span class="hljs-string">&quot;密   码：&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> scan.nextLine();<br><br><span class="hljs-comment">// SELECT user,password FROM user_table WHERE USER = &#x27;1&#x27; or &#x27; AND PASSWORD = &#x27;=&#x27;1&#x27; or &#x27;1&#x27; = &#x27;1&#x27;;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT user,password FROM user_table WHERE USER = &#x27;&quot;</span> + userName + <span class="hljs-string">&quot;&#x27; AND PASSWORD = &#x27;&quot;</span> + password<br>+ <span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> get(sql, User.class);<br><span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;登陆成功!&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;用户名或密码错误！&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 使用Statement实现对数据表的查询操作</span><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">get</span><span class="hljs-params">(String sql, Class&lt;T&gt; clazz)</span> &#123;<br><span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 1.加载配置文件</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> StatementTest.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;jdbc.properties&quot;</span>);<br><span class="hljs-type">Properties</span> <span class="hljs-variable">pros</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>pros.load(is);<br><br><span class="hljs-comment">// 2.读取配置信息</span><br><span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">driverClass</span> <span class="hljs-operator">=</span> pros.getProperty(<span class="hljs-string">&quot;driverClass&quot;</span>);<br><br><span class="hljs-comment">// 3.加载驱动</span><br>Class.forName(driverClass);<br><br><span class="hljs-comment">// 4.获取连接</span><br>conn = DriverManager.getConnection(url, user, password);<br><br>st = conn.createStatement();<br><br>rs = st.executeQuery(sql);<br><br><span class="hljs-comment">// 获取结果集的元数据</span><br><span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> rs.getMetaData();<br><br><span class="hljs-comment">// 获取结果集的列数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> rsmd.getColumnCount();<br><br><span class="hljs-keyword">if</span> (rs.next()) &#123;<br><br>t = clazz.newInstance();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<br><span class="hljs-comment">// //1. 获取列的名称</span><br><span class="hljs-comment">// String columnName = rsmd.getColumnName(i+1);</span><br><br><span class="hljs-comment">// 1. 获取列的别名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">columnName</span> <span class="hljs-operator">=</span> rsmd.getColumnLabel(i + <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 2. 根据列名获取对应数据表中的数据</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">columnVal</span> <span class="hljs-operator">=</span> rs.getObject(columnName);<br><br><span class="hljs-comment">// 3. 将数据表中得到的数据，封装进对象</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(columnName);<br>field.setAccessible(<span class="hljs-literal">true</span>);<br>field.set(t, columnVal);<br>&#125;<br><span class="hljs-keyword">return</span> t;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// 关闭资源</span><br><span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>rs.close();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (st != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>st.close();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>conn.close();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>综上：</p><p><img src="/JDBC/1566569819744.png" alt="1566569819744"></p><h3 id="3-3-PreparedStatement的使用"><a href="#3-3-PreparedStatement的使用" class="headerlink" title="3.3 PreparedStatement的使用"></a>3.3 PreparedStatement的使用</h3><h4 id="3-3-1-PreparedStatement介绍"><a href="#3-3-1-PreparedStatement介绍" class="headerlink" title="3.3.1 PreparedStatement介绍"></a>3.3.1 PreparedStatement介绍</h4><ul><li><p>可以通过调用 Connection 对象的 <strong>preparedStatement(String sql)</strong> 方法获取 PreparedStatement 对象</p></li><li><p><strong>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</strong></p></li><li><p>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</p></li></ul><h4 id="3-3-2-PreparedStatement-vs-Statement"><a href="#3-3-2-PreparedStatement-vs-Statement" class="headerlink" title="3.3.2 PreparedStatement vs Statement"></a>3.3.2 PreparedStatement vs Statement</h4><ul><li><p>代码的可读性和可维护性。</p></li><li><p><strong>PreparedStatement 能最大可能提高性能：</strong></p><ul><li>DBServer会对<strong>预编译</strong>语句提供性能优化。因为预编译语句有可能被重复调用，所以<u>语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</u></li><li>在statement语句中,即使是相同操作但因为数据内容不一样,所以整个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存。这样<u>每执行一次都要对传入的语句编译一次。</u></li><li>(语法检查，语义检查，翻译成二进制命令，缓存)</li></ul></li><li><p>PreparedStatement 可以防止 SQL 注入</p></li></ul><h4 id="3-3-3-Java与SQL对应数据类型转换表"><a href="#3-3-3-Java与SQL对应数据类型转换表" class="headerlink" title="3.3.3 Java与SQL对应数据类型转换表"></a>3.3.3 Java与SQL对应数据类型转换表</h4><table><thead><tr><th>Java类型</th><th>SQL类型</th></tr></thead><tbody><tr><td>boolean</td><td>BIT</td></tr><tr><td>byte</td><td>TINYINT</td></tr><tr><td>short</td><td>SMALLINT</td></tr><tr><td>int</td><td>INTEGER</td></tr><tr><td>long</td><td>BIGINT</td></tr><tr><td>String</td><td>CHAR,VARCHAR,LONGVARCHAR</td></tr><tr><td>byte   array</td><td>BINARY  ,    VAR BINARY</td></tr><tr><td>java.sql.Date</td><td>DATE</td></tr><tr><td>java.sql.Time</td><td>TIME</td></tr><tr><td>java.sql.Timestamp</td><td>TIMESTAMP</td></tr></tbody></table><h4 id="3-3-4-使用PreparedStatement实现增、删、改操作"><a href="#3-3-4-使用PreparedStatement实现增、删、改操作" class="headerlink" title="3.3.4 使用PreparedStatement实现增、删、改操作"></a>3.3.4 使用PreparedStatement实现增、删、改操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通用的增、删、改操作（体现一：增、删、改 ； 体现二：针对于不同的表）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String sql,Object ... args)</span>&#123;<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//1.获取数据库的连接</span><br>conn = JDBCUtils.getConnection();<br><br><span class="hljs-comment">//2.获取PreparedStatement的实例 (或：预编译sql语句)</span><br>ps = conn.prepareStatement(sql);<br><span class="hljs-comment">//3.填充占位符</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; args.length;i++)&#123;<br>ps.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>&#125;<br><br><span class="hljs-comment">//4.执行sql语句</span><br>ps.execute();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-comment">//5.关闭资源</span><br>JDBCUtils.closeResource(conn, ps);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-5-使用PreparedStatement实现查询操作"><a href="#3-3-5-使用PreparedStatement实现查询操作" class="headerlink" title="3.3.5 使用PreparedStatement实现查询操作"></a>3.3.5 使用PreparedStatement实现查询操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通用的针对于不同表的查询:返回一个对象 (version 1.0)</span><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getInstance</span><span class="hljs-params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> &#123;<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 1.获取数据库连接</span><br>conn = JDBCUtils.getConnection();<br><br><span class="hljs-comment">// 2.预编译sql语句，得到PreparedStatement对象</span><br>ps = conn.prepareStatement(sql);<br><br><span class="hljs-comment">// 3.填充占位符</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>ps.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>&#125;<br><br><span class="hljs-comment">// 4.执行executeQuery(),得到结果集：ResultSet</span><br>rs = ps.executeQuery();<br><br><span class="hljs-comment">// 5.得到结果集的元数据：ResultSetMetaData</span><br><span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> rs.getMetaData();<br><br><span class="hljs-comment">// 6.1通过ResultSetMetaData得到columnCount,columnLabel；通过ResultSet得到列值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> rsmd.getColumnCount();<br><span class="hljs-keyword">if</span> (rs.next()) &#123;<br><span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> clazz.newInstance();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnCount; i++) &#123;<span class="hljs-comment">// 遍历每一个列</span><br><br><span class="hljs-comment">// 获取列值</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">columnVal</span> <span class="hljs-operator">=</span> rs.getObject(i + <span class="hljs-number">1</span>);<br><span class="hljs-comment">// 获取列的别名:列的别名，使用类的属性名充当</span><br><span class="hljs-type">String</span> <span class="hljs-variable">columnLabel</span> <span class="hljs-operator">=</span> rsmd.getColumnLabel(i + <span class="hljs-number">1</span>);<br><span class="hljs-comment">// 6.2使用反射，给对象的相应属性赋值</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(columnLabel);<br>field.setAccessible(<span class="hljs-literal">true</span>);<br>field.set(t, columnVal);<br><br>&#125;<br><br><span class="hljs-keyword">return</span> t;<br><br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// 7.关闭资源</span><br>JDBCUtils.closeResource(conn, ps, rs);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：使用PreparedStatement实现的查询操作可以替换Statement实现的查询操作，解决Statement拼串和SQL注入问题。</p></blockquote><h3 id="3-4-ResultSet与ResultSetMetaData"><a href="#3-4-ResultSet与ResultSetMetaData" class="headerlink" title="3.4 ResultSet与ResultSetMetaData"></a>3.4 ResultSet与ResultSetMetaData</h3><h4 id="3-4-1-ResultSet"><a href="#3-4-1-ResultSet" class="headerlink" title="3.4.1 ResultSet"></a>3.4.1 ResultSet</h4><ul><li><p>查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象</p></li><li><p>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商提供实现</p></li><li><p>ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的第一条记录的前面。</p></li><li><p>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。</p></li><li><p>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。</p><ul><li>例如: getInt(1), getString(“name”)</li><li><strong>注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始。</strong></li></ul></li><li><p>ResultSet 接口的常用方法：</p><ul><li><p>boolean next()</p></li><li><p>getString()</p></li><li><p>…</p></li></ul><p><img src="/JDBC/1555580152530.png" alt="1555580152530"></p></li></ul><h4 id="3-4-2-ResultSetMetaData"><a href="#3-4-2-ResultSetMetaData" class="headerlink" title="3.4.2 ResultSetMetaData"></a>3.4.2 ResultSetMetaData</h4><ul><li><p>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象</p></li><li><p>ResultSetMetaData meta &#x3D; rs.getMetaData();</p><ul><li><p><strong>getColumnName</strong>(int column)：获取指定列的名称</p></li><li><p><strong>getColumnLabel</strong>(int column)：获取指定列的别名</p></li><li><p><strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。 </p></li><li><p>getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。 </p></li><li><p>getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。 </p></li><li><p><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。 </p></li><li><p>isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。</p></li></ul></li></ul><p><img src="/JDBC/1555579494691.png" alt="1555579494691"></p><p><strong>问题1：得到结果集后, 如何知道该结果集中有哪些列 ？ 列名是什么？</strong></p><p>​     需要使用一个描述 ResultSet 的对象， 即 ResultSetMetaData</p><p><strong>问题2：关于ResultSetMetaData</strong></p><ol><li><strong>如何获取 ResultSetMetaData</strong>： 调用 ResultSet 的 getMetaData() 方法即可</li><li><strong>获取 ResultSet 中有多少列</strong>：调用 ResultSetMetaData 的 getColumnCount() 方法</li><li><strong>获取 ResultSet 每一列的列的别名是什么</strong>：调用 ResultSetMetaData 的getColumnLabel() 方法</li></ol><p><img src="/JDBC/1555579816884.png" alt="1555579816884"></p><h3 id="3-5-资源的释放"><a href="#3-5-资源的释放" class="headerlink" title="3.5 资源的释放"></a>3.5 资源的释放</h3><ul><li>释放ResultSet, Statement,Connection。</li><li>数据库连接（Connection）是非常稀有的资源，用完后必须马上释放，如果Connection不能及时正确的关闭将导致系统宕机。Connection的使用原则是<strong>尽量晚创建，尽量早的释放。</strong></li><li>可以在finally中关闭，保证及时其他代码出现异常，资源也一定能被关闭。</li></ul><h3 id="3-6-JDBC-API小结"><a href="#3-6-JDBC-API小结" class="headerlink" title="3.6 JDBC API小结"></a>3.6 JDBC API小结</h3><ul><li><p>两种思想</p><ul><li><p>面向接口编程的思想</p></li><li><p>ORM思想(object relational mapping)</p><ul><li>一个数据表对应一个java类</li><li>表中的一条记录对应java类的一个对象</li><li>表中的一个字段对应java类的一个属性</li></ul></li></ul><blockquote><p>sql是需要结合列名和表的属性名来写。注意起别名。</p></blockquote></li><li><p>两种技术</p><ul><li>JDBC结果集的元数据：ResultSetMetaData<ul><li>获取列数：getColumnCount()</li><li>获取列的别名：getColumnLabel()</li></ul></li><li>通过反射，创建指定类的对象，获取指定的属性并赋值</li></ul></li></ul><hr><h2 id="章节练习"><a href="#章节练习" class="headerlink" title="章节练习"></a>章节练习</h2><p><strong>练习题1：从控制台向数据库的表customers中插入一条数据，表结构如下：</strong></p><p><img src="/JDBC/1555580275036.png" alt="1555580275036"></p><p><strong>练习题2：创立数据库表 examstudent，表结构如下：</strong></p><p><img src="/JDBC/1555580735377.png" alt="1555580735377"></p><p>向数据表中添加如下数据：</p><p><img src="/JDBC/1555580763636.png" alt="1555580763636"></p><p><strong>代码实现1：插入一个新的student 信息</strong></p><p>请输入考生的详细信息</p><p>Type:<br>IDCard:<br>ExamCard:<br>StudentName:<br>Location:<br>Grade:</p><p>信息录入成功!</p><p><strong>代码实现2：在 eclipse中建立 java 程序：输入身份证号或准考证号可以查询到学生的基本信息。结果如下：</strong></p><p><img src="/JDBC/1555580937490.png" alt="1555580937490"></p><p><strong>代码实现3：完成学生信息的删除功能</strong></p><p><img src="/JDBC/1555580965019.png" alt="1555580965019"></p><hr><h2 id="第4章-操作BLOB类型字段"><a href="#第4章-操作BLOB类型字段" class="headerlink" title="第4章 操作BLOB类型字段"></a>第4章 操作BLOB类型字段</h2><h3 id="4-1-MySQL-BLOB类型"><a href="#4-1-MySQL-BLOB类型" class="headerlink" title="4.1 MySQL BLOB类型"></a>4.1 MySQL BLOB类型</h3><ul><li><p>MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。</p></li><li><p>插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。</p></li><li><p>MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的)</p></li></ul><p><img src="/JDBC/1555581069798.png" alt="1555581069798"></p><ul><li>实际使用中根据需要存入的数据大小定义不同的BLOB类型。</li><li>需要注意的是：如果存储的文件过大，数据库的性能会下降。</li><li>如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数： <strong>max_allowed_packet&#x3D;16M</strong>。同时注意：修改了my.ini文件之后，需要重新启动mysql服务。</li></ul><h3 id="4-2-向数据表中插入大数据类型"><a href="#4-2-向数据表中插入大数据类型" class="headerlink" title="4.2 向数据表中插入大数据类型"></a>4.2 向数据表中插入大数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取连接</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into customers(name,email,birth,photo)values(?,?,?,?)&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><br><span class="hljs-comment">// 填充占位符</span><br>ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;徐海强&quot;</span>);<br>ps.setString(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;xhq@126.com&quot;</span>);<br>ps.setDate(<span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Date().getTime()));<br><span class="hljs-comment">// 操作Blob类型的变量</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;xhq.png&quot;</span>);<br>ps.setBlob(<span class="hljs-number">4</span>, fis);<br><span class="hljs-comment">//执行</span><br>ps.execute();<br><br>fis.close();<br>JDBCUtils.closeResource(conn, ps);<br><br></code></pre></td></tr></table></figure><h3 id="4-3-修改数据表中的Blob类型字段"><a href="#4-3-修改数据表中的Blob类型字段" class="headerlink" title="4.3 修改数据表中的Blob类型字段"></a>4.3 修改数据表中的Blob类型字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update customers set photo = ? where id = ?&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><br><span class="hljs-comment">// 填充占位符</span><br><span class="hljs-comment">// 操作Blob类型的变量</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;coffee.png&quot;</span>);<br>ps.setBlob(<span class="hljs-number">1</span>, fis);<br>ps.setInt(<span class="hljs-number">2</span>, <span class="hljs-number">25</span>);<br><br>ps.execute();<br><br>fis.close();<br>JDBCUtils.closeResource(conn, ps);<br></code></pre></td></tr></table></figure><h3 id="4-4-从数据表中读取大数据类型"><a href="#4-4-从数据表中读取大数据类型" class="headerlink" title="4.4 从数据表中读取大数据类型"></a>4.4 从数据表中读取大数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT id, name, email, birth, photo FROM customer WHERE id = ?&quot;</span>;<br>conn = getConnection();<br>ps = conn.prepareStatement(sql);<br>ps.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">8</span>);<br>rs = ps.executeQuery();<br><span class="hljs-keyword">if</span>(rs.next())&#123;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-number">1</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-number">2</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-number">3</span>);<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">birth</span> <span class="hljs-operator">=</span> rs.getDate(<span class="hljs-number">4</span>);<br><span class="hljs-type">Customer</span> <span class="hljs-variable">cust</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(id, name, email, birth);<br>    System.out.println(cust); <br>    <span class="hljs-comment">//读取Blob类型的字段</span><br><span class="hljs-type">Blob</span> <span class="hljs-variable">photo</span> <span class="hljs-operator">=</span> rs.getBlob(<span class="hljs-number">5</span>);<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> photo.getBinaryStream();<br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;c.jpg&quot;</span>);<br><span class="hljs-type">byte</span> [] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((len = is.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>os.write(buffer, <span class="hljs-number">0</span>, len);<br>&#125;<br>    JDBCUtils.closeResource(conn, ps, rs);<br><br><span class="hljs-keyword">if</span>(is != <span class="hljs-literal">null</span>)&#123;<br>is.close();<br>&#125;<br><br><span class="hljs-keyword">if</span>(os !=  <span class="hljs-literal">null</span>)&#123;<br>os.close();<br>&#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="第5章-批量插入"><a href="#第5章-批量插入" class="headerlink" title="第5章 批量插入"></a>第5章 批量插入</h2><h3 id="5-1-批量执行SQL语句"><a href="#5-1-批量执行SQL语句" class="headerlink" title="5.1 批量执行SQL语句"></a>5.1 批量执行SQL语句</h3><p>当需要成批插入或者更新记录时，可以采用Java的批量<strong>更新</strong>机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率</p><p>JDBC的批量处理语句包括下面三个方法：</p><ul><li><strong>addBatch(String)：添加需要批量处理的SQL语句或是参数；</strong></li><li><strong>executeBatch()：执行批量处理语句；</strong></li><li><strong>clearBatch():清空缓存的数据</strong></li></ul><p>通常我们会遇到两种批量执行SQL语句的情况：</p><ul><li>多条SQL语句的批量处理；</li><li>一个SQL语句的批量传参；</li></ul><h3 id="5-2-高效的批量插入"><a href="#5-2-高效的批量插入" class="headerlink" title="5.2 高效的批量插入"></a>5.2 高效的批量插入</h3><p>举例：向数据表中插入20000条数据</p><ul><li>数据库中提供一个goods表。创建如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> goods(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTO_INCREMENT,<br>NAME <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>)<br>);<br></code></pre></td></tr></table></figure><h4 id="5-2-1-实现层次一：使用Statement"><a href="#5-2-1-实现层次一：使用Statement" class="headerlink" title="5.2.1 实现层次一：使用Statement"></a>5.2.1 实现层次一：使用Statement</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><span class="hljs-type">Statement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> conn.createStatement();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">20000</span>;i++)&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into goods(name) values(&#x27;name_&#x27; + &quot;</span>+ i +<span class="hljs-string">&quot;)&quot;</span>;<br>st.executeUpdate(sql);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-2-实现层次二：使用PreparedStatement"><a href="#5-2-2-实现层次二：使用PreparedStatement" class="headerlink" title="5.2.2 实现层次二：使用PreparedStatement"></a>5.2.2 实现层次二：使用PreparedStatement</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into goods(name)values(?)&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">20000</span>;i++)&#123;<br>ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;name_&quot;</span> + i);<br>ps.executeUpdate();<br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="hljs-comment">//82340</span><br><br><br>JDBCUtils.closeResource(conn, ps);<br></code></pre></td></tr></table></figure><h4 id="5-2-3-实现层次三"><a href="#5-2-3-实现层次三" class="headerlink" title="5.2.3 实现层次三"></a>5.2.3 实现层次三</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 修改1： 使用 addBatch() / executeBatch() / clearBatch()</span><br><span class="hljs-comment"> * 修改2：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。</span><br><span class="hljs-comment"> *  ?rewriteBatchedStatements=true 写在配置文件的url后面</span><br><span class="hljs-comment"> * 修改3：使用更新的mysql 驱动：mysql-connector-java-5.1.37-bin.jar</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into goods(name)values(?)&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">1000000</span>;i++)&#123;<br>ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;name_&quot;</span> + i);<br><br><span class="hljs-comment">//1.“攒”sql</span><br>ps.addBatch();<br><span class="hljs-keyword">if</span>(i % <span class="hljs-number">500</span> == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//2.执行</span><br>ps.executeBatch();<br><span class="hljs-comment">//3.清空</span><br>ps.clearBatch();<br>&#125;<br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="hljs-comment">//20000条：625                                                                         //1000000条:14733  </span><br><br>JDBCUtils.closeResource(conn, ps);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-4-实现层次四"><a href="#5-2-4-实现层次四" class="headerlink" title="5.2.4 实现层次四"></a>5.2.4 实现层次四</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 层次四：在层次三的基础上操作</span><br><span class="hljs-comment">* 使用Connection 的 setAutoCommit(false)  /  commit()</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br><br><span class="hljs-comment">//1.设置为不自动提交数据</span><br>conn.setAutoCommit(<span class="hljs-literal">false</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into goods(name)values(?)&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">1000000</span>;i++)&#123;<br>ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;name_&quot;</span> + i);<br><br><span class="hljs-comment">//1.“攒”sql</span><br>ps.addBatch();<br><br><span class="hljs-keyword">if</span>(i % <span class="hljs-number">500</span> == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//2.执行</span><br>ps.executeBatch();<br><span class="hljs-comment">//3.清空</span><br>ps.clearBatch();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//2.提交数据</span><br>conn.commit();<br><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;花费的时间为：&quot;</span> + (end - start));<span class="hljs-comment">//1000000条:4978 </span><br><br>JDBCUtils.closeResource(conn, ps);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第6章：-数据库事务"><a href="#第6章：-数据库事务" class="headerlink" title="第6章： 数据库事务"></a>第6章： 数据库事务</h2><h3 id="6-1-数据库事务介绍"><a href="#6-1-数据库事务介绍" class="headerlink" title="6.1 数据库事务介绍"></a>6.1 数据库事务介绍</h3><ul><li><p><strong>事务：一组逻辑操作单元,使数据从一种状态变换到另一种状态。</strong></p></li><li><p><strong>事务处理（事务操作）：</strong>保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都**被提交(commit)<strong>，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务</strong>回滚(rollback)**到最初状态。</p></li><li><p>为确保数据库中数据的<strong>一致性</strong>，数据的操纵应当是离散的成组的逻辑单元：当它全部完成时，数据的一致性可以保持，而当这个单元中的一部分操作失败，整个事务应全部视为错误，所有从起始点以后的操作应全部回退到开始状态。</p></li></ul><h3 id="6-2-JDBC事务处理"><a href="#6-2-JDBC事务处理" class="headerlink" title="6.2 JDBC事务处理"></a>6.2 JDBC事务处理</h3><ul><li><p>数据一旦提交，就不可回滚。</p></li><li><p>数据什么时候意味着提交？</p><ul><li><strong>当一个连接对象被创建时，默认情况下是自动提交事务</strong>：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。</li><li><strong>关闭数据库连接，数据就会自动的提交。</strong>如果多个操作，每个操作使用的是自己单独的连接，则无法保证事务。即同一个事务的多个操作必须在同一个连接下。</li></ul></li><li><p><strong>JDBC程序中为了让多个 SQL 语句作为一个事务执行：</strong></p><ul><li>调用 Connection 对象的 <strong>setAutoCommit(false);</strong> 以取消自动提交事务</li><li>在所有的 SQL 语句都成功执行后，调用 <strong>commit();</strong> 方法提交事务</li><li>在出现异常时，调用 <strong>rollback();</strong> 方法回滚事务</li></ul><blockquote><p>若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态 setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</p></blockquote></li></ul><p>【案例：用户AA向用户BB转账100】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJDBCTransaction</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 1.获取数据库连接</span><br>conn = JDBCUtils.getConnection();<br><span class="hljs-comment">// 2.开启事务</span><br>conn.setAutoCommit(<span class="hljs-literal">false</span>);<br><span class="hljs-comment">// 3.进行数据库操作</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update user_table set balance = balance - 100 where user = ?&quot;</span>;<br>update(conn, sql1, <span class="hljs-string">&quot;AA&quot;</span>);<br><br><span class="hljs-comment">// 模拟网络异常</span><br><span class="hljs-comment">//System.out.println(10 / 0);</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update user_table set balance = balance + 100 where user = ?&quot;</span>;<br>update(conn, sql2, <span class="hljs-string">&quot;BB&quot;</span>);<br><span class="hljs-comment">// 4.若没有异常，则提交事务</span><br>conn.commit();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br><span class="hljs-comment">// 5.若有异常，则回滚事务</span><br><span class="hljs-keyword">try</span> &#123;<br>conn.rollback();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e1) &#123;<br>e1.printStackTrace();<br>&#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//6.恢复每次DML操作的自动提交功能</span><br>conn.setAutoCommit(<span class="hljs-literal">true</span>);<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>e.printStackTrace();<br>&#125;<br>        <span class="hljs-comment">//7.关闭连接</span><br>JDBCUtils.closeResource(conn, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>); <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>其中，对数据库操作的方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用事务以后的通用的增删改操作（version 2.0）</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Connection conn ,String sql, Object... args)</span> &#123;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 1.获取PreparedStatement的实例 (或：预编译sql语句)</span><br>ps = conn.prepareStatement(sql);<br><span class="hljs-comment">// 2.填充占位符</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>ps.setObject(i + <span class="hljs-number">1</span>, args[i]);<br>&#125;<br><span class="hljs-comment">// 3.执行sql语句</span><br>ps.execute();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// 4.关闭资源</span><br>JDBCUtils.closeResource(<span class="hljs-literal">null</span>, ps);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-事务的ACID属性"><a href="#6-3-事务的ACID属性" class="headerlink" title="6.3 事务的ACID属性"></a>6.3 事务的ACID属性</h3><ol><li><p><strong>原子性（Atomicity）</strong><br>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 </p></li><li><p><strong>一致性（Consistency）</strong><br>事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p></li><li><p><strong>隔离性（Isolation）</strong><br>事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p><strong>持久性（Durability）</strong><br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p></li></ol><h4 id="6-3-1-数据库的并发问题"><a href="#6-3-1-数据库的并发问题" class="headerlink" title="6.3.1 数据库的并发问题"></a>6.3.1 数据库的并发问题</h4><ul><li><p>对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:</p><ul><li><strong>脏读</strong>: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还<strong>没有被提交</strong>的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</li><li><strong>不可重复读</strong>: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 <strong>更新</strong>了该字段。之后, T1再次读取同一个字段, 值就不同了。</li><li><strong>幻读</strong>: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中<strong>插入</strong>了一些新的行。之后, 如果 T1 再次读取同一个表, 就会多出几行。</li></ul></li><li><p><strong>数据库事务的隔离性</strong>: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。</p></li><li><p>一个事务与其他事务隔离的程度称为隔离级别。数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, <strong>隔离级别越高, 数据一致性就越好, 但并发性越弱。</strong></p></li></ul><h4 id="6-3-2-四种隔离级别"><a href="#6-3-2-四种隔离级别" class="headerlink" title="6.3.2 四种隔离级别"></a>6.3.2 四种隔离级别</h4><ul><li><p>数据库提供的4种事务隔离级别：</p><p><img src="/JDBC/1555586275271.png" alt="1555586275271"></p></li><li><p>Oracle 支持的 2 种事务隔离级别：<strong>READ COMMITED</strong>, SERIALIZABLE。 Oracle 默认的事务隔离级别为: <strong>READ COMMITED</strong> 。</p></li><li><p>Mysql 支持 4 种事务隔离级别。Mysql 默认的事务隔离级别为: <strong>REPEATABLE READ。</strong></p></li></ul><h4 id="6-3-3-在MySql中设置隔离级别"><a href="#6-3-3-在MySql中设置隔离级别" class="headerlink" title="6.3.3 在MySql中设置隔离级别"></a>6.3.3 在MySql中设置隔离级别</h4><ul><li><p>每启动一个 mysql 程序, 就会获得一个单独的数据库连接. 每个数据库连接都有一个全局变量 @@tx_isolation, 表示当前的事务隔离级别。</p></li><li><p>查看当前的隔离级别: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT @@tx_isolation;<br></code></pre></td></tr></table></figure></li><li><p>设置当前 mySQL 连接的隔离级别:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set  transaction isolation level read committed;<br></code></pre></td></tr></table></figure></li><li><p>设置数据库系统的全局的隔离级别:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set global transaction isolation level read committed;<br></code></pre></td></tr></table></figure></li><li><p>补充操作：</p><ul><li><p>创建mysql数据库用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create user tom identified by &#x27;abc123&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>授予权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#授予通过网络方式登录的tom用户，对所有库所有表的全部权限，密码设为abc123.<br>grant all privileges on *.* to tom@&#x27;%&#x27;  identified by &#x27;abc123&#x27;; <br><br> #给tom用户使用本地命令行方式，授予atguigudb这个库下的所有表的插删改查的权限。<br>grant select,insert,delete,update on atguigudb.* to tom@localhost identified by &#x27;abc123&#x27;; <br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="第7章：DAO及相关实现类"><a href="#第7章：DAO及相关实现类" class="headerlink" title="第7章：DAO及相关实现类"></a>第7章：DAO及相关实现类</h2><ul><li>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。有时也称作：BaseDAO</li><li>作用：为了实现功能的模块化，更有利于代码的维护和升级。</li><li>下面是尚硅谷JavaWeb阶段书城项目中DAO使用的体现：</li></ul><p><img src="/JDBC/1566726681515.png" alt="1566726681515"></p><ul><li>层次结构：</li></ul><p><img src="/JDBC/1566745811244.png" alt="1566745811244"></p><h3 id="【BaseDAO-java】"><a href="#【BaseDAO-java】" class="headerlink" title="【BaseDAO.java】"></a>【BaseDAO.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.dao;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.ParameterizedType;<br><span class="hljs-keyword">import</span> java.lang.reflect.Type;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义一个用来被继承的对数据库进行基本操作的Dao</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> HanYanBing</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDao</span>&lt;T&gt; &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><span class="hljs-comment">// 定义一个变量来接收泛型的类型</span><br><span class="hljs-keyword">private</span> Class&lt;T&gt; type;<br><br><span class="hljs-comment">// 获取T的Class对象，获取泛型的类型，泛型是在被子类继承时才确定</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseDao</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 获取子类的类型</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass();<br><span class="hljs-comment">// 获取父类的类型</span><br><span class="hljs-comment">// getGenericSuperclass()用来获取当前类的父类的类型</span><br><span class="hljs-comment">// ParameterizedType表示的是带泛型的类型</span><br><span class="hljs-type">ParameterizedType</span> <span class="hljs-variable">parameterizedType</span> <span class="hljs-operator">=</span> (ParameterizedType) clazz.getGenericSuperclass();<br><span class="hljs-comment">// 获取具体的泛型类型 getActualTypeArguments获取具体的泛型的类型</span><br><span class="hljs-comment">// 这个方法会返回一个Type的数组</span><br>Type[] types = parameterizedType.getActualTypeArguments();<br><span class="hljs-comment">// 获取具体的泛型的类型·</span><br><span class="hljs-built_in">this</span>.type = (Class&lt;T&gt;) types[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通用的增删改操作</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sql</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Connection conn,String sql, Object... params)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">try</span> &#123;<br>count = queryRunner.update(conn, sql, params);<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>e.printStackTrace();<br>&#125; <br><span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取一个对象</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sql</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">getBean</span><span class="hljs-params">(Connection conn,String sql, Object... params)</span> &#123;<br><span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>t = queryRunner.query(conn, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;T&gt;(type), params);<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>e.printStackTrace();<br>&#125; <br><span class="hljs-keyword">return</span> t;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取所有对象</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sql</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title function_">getBeanList</span><span class="hljs-params">(Connection conn,String sql, Object... params)</span> &#123;<br>List&lt;T&gt; list = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>list = queryRunner.query(conn, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;T&gt;(type), params);<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>e.printStackTrace();<br>&#125; <br><span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取一个但一值得方法，专门用来执行像 select count(*)...这样的sql语句</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> sql</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> params</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">(Connection conn,String sql, Object... params)</span> &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// 调用queryRunner的query方法获取一个单一的值</span><br>count = queryRunner.query(conn, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScalarHandler</span>&lt;&gt;(), params);<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>e.printStackTrace();<br>&#125; <br><span class="hljs-keyword">return</span> count;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【BookDAO-java】"><a href="#【BookDAO-java】" class="headerlink" title="【BookDAO.java】"></a>【BookDAO.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.dao;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.Book;<br><span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.Page;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从数据库中查询出所有的记录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>List&lt;Book&gt; <span class="hljs-title function_">getBooks</span><span class="hljs-params">(Connection conn)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 向数据库中插入一条记录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> book</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">saveBook</span><span class="hljs-params">(Connection conn,Book book)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从数据库中根据图书的id删除一条记录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> bookId</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBookById</span><span class="hljs-params">(Connection conn,String bookId)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据图书的id从数据库中查询出一条记录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> bookId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br>Book <span class="hljs-title function_">getBookById</span><span class="hljs-params">(Connection conn,String bookId)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据图书的id从数据库中更新一条记录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> book</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Connection conn,Book book)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取带分页的图书信息</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span><br><span class="hljs-comment"> */</span><br>Page&lt;Book&gt; <span class="hljs-title function_">getPageBooks</span><span class="hljs-params">(Connection conn,Page&lt;Book&gt; page)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取带分页和价格范围的图书信息</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span><br><span class="hljs-comment"> */</span><br>Page&lt;Book&gt; <span class="hljs-title function_">getPageBooksByPrice</span><span class="hljs-params">(Connection conn,Page&lt;Book&gt; page, <span class="hljs-type">double</span> minPrice, <span class="hljs-type">double</span> maxPrice)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【UserDAO-java】"><a href="#【UserDAO-java】" class="headerlink" title="【UserDAO.java】"></a>【UserDAO.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.dao;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><br><span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.User;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据User对象中的用户名和密码从数据库中获取一条记录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> User 数据库中有记录 null 数据库中无此记录</span><br><span class="hljs-comment"> */</span><br>User <span class="hljs-title function_">getUser</span><span class="hljs-params">(Connection conn,User user)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据User对象中的用户名从数据库中获取一条记录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> true 数据库中有记录 false 数据库中无此记录</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">checkUsername</span><span class="hljs-params">(Connection conn,User user)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 向数据库中插入User对象</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(Connection conn,User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【BookDaoImpl-java】"><a href="#【BookDaoImpl-java】" class="headerlink" title="【BookDaoImpl.java】"></a>【BookDaoImpl.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.dao.impl;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.Book;<br><span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.Page;<br><span class="hljs-keyword">import</span> com.atguigu.bookstore.dao.BaseDao;<br><span class="hljs-keyword">import</span> com.atguigu.bookstore.dao.BookDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDao</span>&lt;Book&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookDao</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">getBooks</span><span class="hljs-params">(Connection conn)</span> &#123;<br><span class="hljs-comment">// 调用BaseDao中得到一个List的方法</span><br>List&lt;Book&gt; beanList = <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// 写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books&quot;</span>;<br>beanList = getBeanList(conn,sql);<br><span class="hljs-keyword">return</span> beanList;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveBook</span><span class="hljs-params">(Connection conn,Book book)</span> &#123;<br><span class="hljs-comment">// 写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into books(title,author,price,sales,stock,img_path) values(?,?,?,?,?,?)&quot;</span>;<br><span class="hljs-comment">// 调用BaseDao中通用的增删改的方法</span><br>update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(),book.getImgPath());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteBookById</span><span class="hljs-params">(Connection conn,String bookId)</span> &#123;<br><span class="hljs-comment">// 写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;DELETE FROM books WHERE id = ?&quot;</span>;<br><span class="hljs-comment">// 调用BaseDao中通用增删改的方法</span><br>update(conn,sql, bookId);<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getBookById</span><span class="hljs-params">(Connection conn,String bookId)</span> &#123;<br><span class="hljs-comment">// 调用BaseDao中获取一个对象的方法</span><br><span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// 写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books where id = ?&quot;</span>;<br>book = getBean(conn,sql, bookId);<br><span class="hljs-keyword">return</span> book;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateBook</span><span class="hljs-params">(Connection conn,Book book)</span> &#123;<br><span class="hljs-comment">// 写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update books set title = ? , author = ? , price = ? , sales = ? , stock = ? where id = ?&quot;</span>;<br><span class="hljs-comment">// 调用BaseDao中通用的增删改的方法</span><br>update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(), book.getId());<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Page&lt;Book&gt; <span class="hljs-title function_">getPageBooks</span><span class="hljs-params">(Connection conn,Page&lt;Book&gt; page)</span> &#123;<br><span class="hljs-comment">// 获取数据库中图书的总记录数</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(*) from books&quot;</span>;<br><span class="hljs-comment">// 调用BaseDao中获取一个单一值的方法</span><br><span class="hljs-type">long</span> <span class="hljs-variable">totalRecord</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>) getValue(conn,sql);<br><span class="hljs-comment">// 将总记录数设置都page对象中</span><br>page.setTotalRecord((<span class="hljs-type">int</span>) totalRecord);<br><br><span class="hljs-comment">// 获取当前页中的记录存放的List</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books limit ?,?&quot;</span>;<br><span class="hljs-comment">// 调用BaseDao中获取一个集合的方法</span><br>List&lt;Book&gt; beanList = getBeanList(conn,sql2, (page.getPageNo() - <span class="hljs-number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);<br><span class="hljs-comment">// 将这个List设置到page对象中</span><br>page.setList(beanList);<br><span class="hljs-keyword">return</span> page;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Page&lt;Book&gt; <span class="hljs-title function_">getPageBooksByPrice</span><span class="hljs-params">(Connection conn,Page&lt;Book&gt; page, <span class="hljs-type">double</span> minPrice, <span class="hljs-type">double</span> maxPrice)</span> &#123;<br><span class="hljs-comment">// 获取数据库中图书的总记录数</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select count(*) from books where price between ? and ?&quot;</span>;<br><span class="hljs-comment">// 调用BaseDao中获取一个单一值的方法</span><br><span class="hljs-type">long</span> <span class="hljs-variable">totalRecord</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>) getValue(conn,sql,minPrice,maxPrice);<br><span class="hljs-comment">// 将总记录数设置都page对象中</span><br>page.setTotalRecord((<span class="hljs-type">int</span>) totalRecord);<br><br><span class="hljs-comment">// 获取当前页中的记录存放的List</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,title,author,price,sales,stock,img_path imgPath from books where price between ? and ? limit ?,?&quot;</span>;<br><span class="hljs-comment">// 调用BaseDao中获取一个集合的方法</span><br>List&lt;Book&gt; beanList = getBeanList(conn,sql2, minPrice , maxPrice , (page.getPageNo() - <span class="hljs-number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);<br><span class="hljs-comment">// 将这个List设置到page对象中</span><br>page.setList(beanList);<br><br><span class="hljs-keyword">return</span> page;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【UserDaoImpl-java】"><a href="#【UserDaoImpl-java】" class="headerlink" title="【UserDaoImpl.java】"></a>【UserDaoImpl.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.dao.impl;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><br><span class="hljs-keyword">import</span> com.atguigu.bookstore.beans.User;<br><span class="hljs-keyword">import</span> com.atguigu.bookstore.dao.BaseDao;<br><span class="hljs-keyword">import</span> com.atguigu.bookstore.dao.UserDao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDaoImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDao</span>&lt;User&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDao</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUser</span><span class="hljs-params">(Connection conn,User user)</span> &#123;<br><span class="hljs-comment">// 调用BaseDao中获取一个对象的方法</span><br><span class="hljs-type">User</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// 写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,username,password,email from users where username = ? and password = ?&quot;</span>;<br>bean = getBean(conn,sql, user.getUsername(), user.getPassword());<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkUsername</span><span class="hljs-params">(Connection conn,User user)</span> &#123;<br><span class="hljs-comment">// 调用BaseDao中获取一个对象的方法</span><br><span class="hljs-type">User</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// 写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,username,password,email from users where username = ?&quot;</span>;<br>bean = getBean(conn,sql, user.getUsername());<br><span class="hljs-keyword">return</span> bean != <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(Connection conn,User user)</span> &#123;<br><span class="hljs-comment">//写sql语句</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into users(username,password,email) values(?,?,?)&quot;</span>;<br><span class="hljs-comment">//调用BaseDao中通用的增删改的方法</span><br>update(conn,sql, user.getUsername(),user.getPassword(),user.getEmail());<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【Book-java】"><a href="#【Book-java】" class="headerlink" title="【Book.java】"></a>【Book.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.beans;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 图书类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> songhongkang</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;<br><br><span class="hljs-keyword">private</span> Integer id;<br><span class="hljs-keyword">private</span> String title; <span class="hljs-comment">// 书名</span><br><span class="hljs-keyword">private</span> String author; <span class="hljs-comment">// 作者</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price; <span class="hljs-comment">// 价格</span><br><span class="hljs-keyword">private</span> Integer sales; <span class="hljs-comment">// 销量</span><br><span class="hljs-keyword">private</span> Integer stock; <span class="hljs-comment">// 库存</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">imgPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;static/img/default.jpg&quot;</span>; <span class="hljs-comment">// 封面图片的路径</span><br><span class="hljs-comment">//构造器，get()，set()，toString()方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="【Page-java】"><a href="#【Page-java】" class="headerlink" title="【Page.java】"></a>【Page.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.beans;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 页码类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> songhongkang</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Page</span>&lt;T&gt; &#123;<br><br><span class="hljs-keyword">private</span> List&lt;T&gt; list; <span class="hljs-comment">// 每页查到的记录存放的集合</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PAGE_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>; <span class="hljs-comment">// 每页显示的记录数</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pageNo; <span class="hljs-comment">// 当前页</span><br><span class="hljs-comment">//private int totalPageNo; // 总页数，通过计算得到</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> totalRecord; <span class="hljs-comment">// 总记录数，通过查询数据库得到</span><br><br></code></pre></td></tr></table></figure><h3 id="【User-java】"><a href="#【User-java】" class="headerlink" title="【User.java】"></a>【User.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.bookstore.beans;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> songhongkang</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br><span class="hljs-keyword">private</span> Integer id;<br><span class="hljs-keyword">private</span> String username;<br><span class="hljs-keyword">private</span> String password;<br><span class="hljs-keyword">private</span> String email;<br><br></code></pre></td></tr></table></figure><h2 id="第8章：数据库连接池"><a href="#第8章：数据库连接池" class="headerlink" title="第8章：数据库连接池"></a>第8章：数据库连接池</h2><h3 id="8-1-JDBC数据库连接池的必要性"><a href="#8-1-JDBC数据库连接池的必要性" class="headerlink" title="8.1 JDBC数据库连接池的必要性"></a>8.1 JDBC数据库连接池的必要性</h3><ul><li><p>在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：　　</p><ul><li><strong>在主程序（如servlet、beans）中建立数据库连接</strong></li><li><strong>进行sql操作</strong></li><li><strong>断开数据库连接</strong></li></ul></li><li><p>这种模式开发，存在的问题:</p><ul><li>普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用。</strong>若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li><li><strong>对于每一次数据库连接，使用完后都得断开。</strong>否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将导致重启数据库。（回忆：何为Java的内存泄漏？）</li><li><strong>这种开发不能控制被创建的连接对象数</strong>，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。</li></ul></li></ul><h3 id="8-2-数据库连接池技术"><a href="#8-2-数据库连接池技术" class="headerlink" title="8.2 数据库连接池技术"></a>8.2 数据库连接池技术</h3><ul><li><p>为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。</p></li><li><p><strong>数据库连接池的基本思想</strong>：就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。</p></li><li><p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。</p></li><li><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p></li></ul><p><img src="/JDBC/1555593464033.png" alt="1555593464033"></p><ul><li><strong>工作原理：</strong></li></ul><p><img src="/JDBC/1555593598606.png" alt="1555593598606"></p><ul><li><p><strong>数据库连接池技术的优点</strong></p><p><strong>1. 资源重用</strong></p><p>由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</p><p><strong>2. 更快的系统反应速度</strong></p><p>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间</p><p><strong>3. 新的资源分配手段</strong></p><p>对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源</p><p><strong>4. 统一的连接管理，避免数据库连接泄漏</strong></p><p>在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</p></li></ul><h3 id="8-3-多种开源的数据库连接池"><a href="#8-3-多种开源的数据库连接池" class="headerlink" title="8.3 多种开源的数据库连接池"></a>8.3 多种开源的数据库连接池</h3><ul><li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：<ul><li><strong>DBCP</strong> 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持。</li><li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，<strong>速度相对较慢，稳定性还可以。</strong>hibernate官方推荐使用</li><li><strong>Proxool</strong> 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，<strong>稳定性较c3p0差一点</strong></li><li><strong>BoneCP</strong> 是一个开源组织提供的数据库连接池，速度快</li><li><strong>Druid</strong> 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快</li></ul></li><li>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池</li><li><strong>DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</strong></li><li>特别注意：<ul><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此<strong>整个应用只需要一个数据源即可。</strong></li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li></ul></li></ul><h4 id="8-3-1-C3P0数据库连接池"><a href="#8-3-1-C3P0数据库连接池" class="headerlink" title="8.3.1 C3P0数据库连接池"></a>8.3.1 C3P0数据库连接池</h4><ul><li>获取连接方式一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用C3P0数据库连接池的方式，获取数据库的连接：不推荐</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">cpds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br>cpds.setDriverClass(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>); <br>cpds.setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);<br>cpds.setUser(<span class="hljs-string">&quot;root&quot;</span>);<br>cpds.setPassword(<span class="hljs-string">&quot;abc123&quot;</span>);<br><br><span class="hljs-comment">//cpds.setMaxPoolSize(100);</span><br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> cpds.getConnection();<br><span class="hljs-keyword">return</span> conn;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>获取连接方式二</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用C3P0数据库连接池的配置文件方式，获取数据库的连接：推荐</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">DataSource</span> <span class="hljs-variable">cpds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>(<span class="hljs-string">&quot;helloc3p0&quot;</span>);<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException&#123;<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> cpds.getConnection();<br><span class="hljs-keyword">return</span> conn;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，src下的配置文件为：【c3p0-config.xml】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">c3p0-config</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">named-config</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;helloc3p0&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 获取连接的4个基本信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>abc123<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql:///test<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 涉及到数据库连接池的管理的相关属性的设置 --&gt;</span><br><span class="hljs-comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;initialPoolSize&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxPoolSize&quot;</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxStatements&quot;</span>&gt;</span>20<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxStatementsPerConnection&quot;</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">named-config</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">c3p0-config</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8-3-2-DBCP数据库连接池"><a href="#8-3-2-DBCP数据库连接池" class="headerlink" title="8.3.2 DBCP数据库连接池"></a>8.3.2 DBCP数据库连接池</h4><ul><li>DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Common-pool。如需使用该连接池实现，应在系统中增加如下两个 jar 文件：<ul><li>Commons-dbcp.jar：连接池的实现</li><li>Commons-pool.jar：连接池实现的依赖库</li></ul></li><li><strong>Tomcat 的连接池正是采用该连接池来实现的。</strong>该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</li><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但上面的代码并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li><li>配置属性说明</li></ul><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>initialSize</td><td>0</td><td>连接池启动时创建的初始化连接数量</td></tr><tr><td>maxActive</td><td>8</td><td>连接池中可同时连接的最大的连接数</td></tr><tr><td>maxIdle</td><td>8</td><td>连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制</td></tr><tr><td>minIdle</td><td>0</td><td>连接池中最小的空闲的连接数，低于这个数量会被创建新的连接。该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大。</td></tr><tr><td>maxWait</td><td>无限制</td><td>最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>开启池的Statement是否prepared</td></tr><tr><td>maxOpenPreparedStatements</td><td>无限制</td><td>开启池的prepared 后的同时最大连接数</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td>连接池中连接，在时间段内一直空闲， 被逐出连接池的时间</td></tr><tr><td>removeAbandonedTimeout</td><td>300</td><td>超过时间限制，回收没有用(废弃)的连接</td></tr><tr><td>removeAbandoned</td><td>false</td><td>超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收</td></tr></tbody></table><ul><li>获取连接方式一：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">BasicDataSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicDataSource</span>();<br><br>source.setDriverClassName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>source.setUrl(<span class="hljs-string">&quot;jdbc:mysql:///test&quot;</span>);<br>source.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>source.setPassword(<span class="hljs-string">&quot;abc123&quot;</span>);<br><br><span class="hljs-comment">//</span><br>source.setInitialSize(<span class="hljs-number">10</span>);<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> source.getConnection();<br><span class="hljs-keyword">return</span> conn;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>获取连接方式二：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用dbcp数据库连接池的配置文件方式，获取数据库的连接：推荐</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">DataSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">static</span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">Properties</span> <span class="hljs-variable">pros</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> DBCPTest.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;dbcp.properties&quot;</span>);<br><br>pros.load(is);<br><span class="hljs-comment">//根据提供的BasicDataSourceFactory创建对应的DataSource对象</span><br>source = BasicDataSourceFactory.createDataSource(pros);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> source.getConnection();<br><br><span class="hljs-keyword">return</span> conn;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，src下的配置文件为：【dbcp.properties】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&amp;useServerPrepStmts=false</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">abc123</span><br><br><span class="hljs-attr">initialSize</span>=<span class="hljs-string">10</span><br><span class="hljs-comment">#...</span><br></code></pre></td></tr></table></figure><h4 id="8-3-3-Druid（德鲁伊）数据库连接池"><a href="#8-3-3-Druid（德鲁伊）数据库连接池" class="headerlink" title="8.3.3 Druid（德鲁伊）数据库连接池"></a>8.3.3 Druid（德鲁伊）数据库连接池</h4><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.druid;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDruid</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">Properties</span> <span class="hljs-variable">pro</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>(); pro.load(TestDruid.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;druid.properties&quot;</span>));<br><span class="hljs-type">DataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(pro);<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> ds.getConnection();<br>System.out.println(conn);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>其中，src下的配置文件为：【druid.properties】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/test?rewriteBatchedStatements=true</span><br>username=root<br>password=<span class="hljs-number">123456</span><br>driverClassName=com.mysql.jdbc.Driver<br><br>initialSize=<span class="hljs-number">10</span><br>maxActive=<span class="hljs-number">20</span><br>maxWait=<span class="hljs-number">1000</span><br>filters=wall<br></code></pre></td></tr></table></figure><ul><li>详细配置参数：</li></ul><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql:&#x2F;&#x2F;10.20.153.104:3306&#x2F;druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><h2 id="第9章：Apache-DBUtils实现CRUD操作"><a href="#第9章：Apache-DBUtils实现CRUD操作" class="headerlink" title="第9章：Apache-DBUtils实现CRUD操作"></a>第9章：Apache-DBUtils实现CRUD操作</h2><h3 id="9-1-Apache-DBUtils简介"><a href="#9-1-Apache-DBUtils简介" class="headerlink" title="9.1 Apache-DBUtils简介"></a>9.1 Apache-DBUtils简介</h3><ul><li><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p></li><li><p>API介绍：</p><ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li><li>工具类：org.apache.commons.dbutils.DbUtils</li></ul></li><li><p>API包说明：</p></li></ul><p><img src="/JDBC/1555595163263.png" alt="1555595163263"></p><p><img src="/JDBC/1555595198644.png" alt="1555595198644"></p><h3 id="9-2-主要API的使用"><a href="#9-2-主要API的使用" class="headerlink" title="9.2 主要API的使用"></a>9.2 主要API的使用</h3><h4 id="9-2-1-DbUtils"><a href="#9-2-1-DbUtils" class="headerlink" title="9.2.1 DbUtils"></a>9.2.1 DbUtils</h4><ul><li>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：<ul><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li><li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li><li>public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接</li><li>public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。 </li><li>public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断</li><li>public static void rollbackAndClose(Connection conn)throws SQLException</li><li>rollbackAndCloseQuietly(Connection)</li><li>public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</li></ul></li></ul><h4 id="9-2-2-QueryRunner类"><a href="#9-2-2-QueryRunner类" class="headerlink" title="9.2.2 QueryRunner类"></a>9.2.2 QueryRunner类</h4><ul><li><p><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></p></li><li><p>QueryRunner类提供了两个构造器：</p><ul><li>默认的构造器</li><li>需要一个 javax.sql.DataSource 来作参数的构造器</li></ul></li><li><p>QueryRunner类的主要方法：</p><ul><li><strong>更新</strong><ul><li>public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</li><li>……</li></ul></li><li><strong>插入</strong><ul><li>public <T> T insert(Connection conn,String sql,ResultSetHandler<T> rsh, Object… params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys.  返回值: An object generated by the handler.即自动生成的键值</li><li>….</li></ul></li><li><strong>批处理</strong><ul><li>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句</li><li>public <T> T insertBatch(Connection conn,String sql,ResultSetHandler<T> rsh,Object[][] params)throws SQLException：只支持INSERT语句</li><li>…..</li></ul></li><li><strong>查询</strong><ul><li>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</li><li>……</li></ul></li></ul></li><li><p>测试</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试添加</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection3();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into customers(name,email,birth)values(?,?,?)&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> runner.update(conn, sql, <span class="hljs-string">&quot;何成飞&quot;</span>, <span class="hljs-string">&quot;he@qq.com&quot;</span>, <span class="hljs-string">&quot;1992-09-08&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;添加了&quot;</span> + count + <span class="hljs-string">&quot;条记录&quot;</span>);<br><br>JDBCUtils.closeResource(conn, <span class="hljs-literal">null</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试删除</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection3();<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from customers where id &lt; ?&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> runner.update(conn, sql,<span class="hljs-number">3</span>);<br><br>System.out.println(<span class="hljs-string">&quot;删除了&quot;</span> + count + <span class="hljs-string">&quot;条记录&quot;</span>);<br><br>JDBCUtils.closeResource(conn, <span class="hljs-literal">null</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-2-3-ResultSetHandler接口及实现类"><a href="#9-2-3-ResultSetHandler接口及实现类" class="headerlink" title="9.2.3 ResultSetHandler接口及实现类"></a>9.2.3 ResultSetHandler接口及实现类</h4><ul><li><p>该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。</p></li><li><p>ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。</p></li><li><p>接口的主要实现类：</p><ul><li><p>ArrayHandler：把结果集中的第一行数据转成对象数组。</p></li><li><p>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</p></li><li><p><strong>BeanHandler：</strong>将结果集中的第一行数据封装到一个对应的JavaBean实例中。</p></li><li><p><strong>BeanListHandler：</strong>将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</p></li><li><p>ColumnListHandler：将结果集中某一列的数据存放到List中。</p></li><li><p>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</p></li><li><p><strong>MapHandler：</strong>将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</p></li><li><p><strong>MapListHandler：</strong>将结果集中的每一行数据都封装到一个Map里，然后再存放到List</p></li><li><p><strong>ScalarHandler：</strong>查询单个值对象</p></li></ul></li><li><p>测试</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 测试查询:查询一条记录</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 使用ResultSetHandler的实现类：BeanHandler</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryInstance</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection3();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;<br><br><span class="hljs-comment">//</span><br>BeanHandler&lt;Customer&gt; handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;&gt;(Customer.class);<br><span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> runner.query(conn, sql, handler, <span class="hljs-number">23</span>);<br>System.out.println(customer);<br>JDBCUtils.closeResource(conn, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 测试查询:查询多条记录构成的集合</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 使用ResultSetHandler的实现类：BeanListHandler</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryList</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection3();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,name,email,birth from customers where id &lt; ?&quot;</span>;<br><br><span class="hljs-comment">//</span><br>BeanListHandler&lt;Customer&gt; handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;&gt;(Customer.class);<br>List&lt;Customer&gt; list = runner.query(conn, sql, handler, <span class="hljs-number">23</span>);<br>list.forEach(System.out::println);<br><br>JDBCUtils.closeResource(conn, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 自定义ResultSetHandler的实现类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryInstance1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection3();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,name,email,birth from customers where id = ?&quot;</span>;<br><br>ResultSetHandler&lt;Customer&gt; handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultSetHandler</span>&lt;Customer&gt;() &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Customer <span class="hljs-title function_">handle</span><span class="hljs-params">(ResultSet rs)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>System.out.println(<span class="hljs-string">&quot;handle&quot;</span>);<br><span class="hljs-comment">//return new Customer(1,&quot;Tom&quot;,&quot;tom@126.com&quot;,new Date(123323432L));</span><br><br><span class="hljs-keyword">if</span>(rs.next())&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> rs.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> rs.getString(<span class="hljs-string">&quot;email&quot;</span>);<br><span class="hljs-type">Date</span> <span class="hljs-variable">birth</span> <span class="hljs-operator">=</span> rs.getDate(<span class="hljs-string">&quot;birth&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(id, name, email, birth);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>&#125;<br>&#125;;<br><br><span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> runner.query(conn, sql, handler, <span class="hljs-number">23</span>);<br><br>System.out.println(customer);<br><br>JDBCUtils.closeResource(conn, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 如何查询类似于最大的，最小的，平均的，总和，个数相关的数据，</span><br><span class="hljs-comment"> * 使用ScalarHandler</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryValue</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><span class="hljs-type">QueryRunner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection3();<br><br><span class="hljs-comment">//测试一：</span><br><span class="hljs-comment">//String sql = &quot;select count(*) from customers where id &lt; ?&quot;;</span><br><span class="hljs-comment">//ScalarHandler handler = new ScalarHandler();</span><br><span class="hljs-comment">//long count = (long) runner.query(conn, sql, handler, 20);</span><br><span class="hljs-comment">//System.out.println(count);</span><br><br><span class="hljs-comment">//测试二：</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select max(birth) from customers&quot;</span>;<br><span class="hljs-type">ScalarHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScalarHandler</span>();<br><span class="hljs-type">Date</span> <span class="hljs-variable">birth</span> <span class="hljs-operator">=</span> (Date) runner.query(conn, sql, handler);<br>System.out.println(birth);<br><br>JDBCUtils.closeResource(conn, <span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JDBC总结"><a href="#JDBC总结" class="headerlink" title="JDBC总结"></a>JDBC总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">总结<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateWithTx</span><span class="hljs-params">()</span> &#123;<br><br><span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//1.获取连接的操作（</span><br><span class="hljs-comment">//① 手写的连接：JDBCUtils.getConnection();</span><br><span class="hljs-comment">//② 使用数据库连接池：C3P0;DBCP;Druid</span><br><span class="hljs-comment">//2.对数据表进行一系列CRUD操作</span><br><span class="hljs-comment">//① 使用PreparedStatement实现通用的增删改、查询操作（version 1.0 \ version 2.0)</span><br><span class="hljs-comment">//version2.0的增删改public void update(Connection conn,String sql,Object ... args)&#123;&#125;</span><br><span class="hljs-comment">//version2.0的查询 public &lt;T&gt; T getInstance(Connection conn,Class&lt;T&gt; clazz,String sql,Object ... args)&#123;&#125;</span><br><span class="hljs-comment">//② 使用dbutils提供的jar包中提供的QueryRunner类</span><br><br><span class="hljs-comment">//提交数据</span><br>conn.commit();<br><br><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br><br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//回滚数据</span><br>conn.rollback();<br>&#125; <span class="hljs-keyword">catch</span> (SQLException e1) &#123;<br>e1.printStackTrace();<br>&#125;<br><br>&#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-comment">//3.关闭连接等操作</span><br><span class="hljs-comment">//① JDBCUtils.closeResource();</span><br><span class="hljs-comment">//② 使用dbutils提供的jar包中提供的DbUtils类提供了关闭的相关操作</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>22-11-1</title>
    <link href="/2022/11/01/22-11-1/"/>
    <url>/2022/11/01/22-11-1/</url>
    
    <content type="html"><![CDATA[<h1 id="近期总结"><a href="#近期总结" class="headerlink" title="近期总结"></a>近期总结</h1><h2 id="力扣"><a href="#力扣" class="headerlink" title="力扣"></a>力扣</h2><h3 id="59-螺旋矩阵"><a href="#59-螺旋矩阵" class="headerlink" title="59.螺旋矩阵"></a>59.螺旋矩阵</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/">力扣题目链接(opens new window)</a></p><p>给定一个正整数 n，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p><p>示例:</p><p>输入: 3 输出: [ [ 1, 2, 3 ], [ 8, 9, 4 ], [ 7, 6, 5 ] ]</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这是一个循环控制的问题，重点是每次循环都要保持左闭右开。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generateMatrix</span>(<span class="hljs-params">self, n</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type n: int</span><br><span class="hljs-string">        :rtype: List[List[int]]</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        loop = n // <span class="hljs-number">2</span><br>        x = <span class="hljs-number">0</span><br>        y = <span class="hljs-number">0</span><br>        L = [[<span class="hljs-number">0</span>] * n <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        key = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(loop):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">2</span> * j - <span class="hljs-number">1</span>):<br>                L[x][y] = key<br>                key += <span class="hljs-number">1</span><br>                y += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">2</span> * j - <span class="hljs-number">1</span>):<br>                L[x][y] = key<br>                x += <span class="hljs-number">1</span><br>                key += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">2</span> * j - <span class="hljs-number">1</span>):<br>                L[x][y] = key<br>                y -= <span class="hljs-number">1</span><br>                key += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">2</span> * j - <span class="hljs-number">1</span>):<br>                L[x][y] = key<br>                x -= <span class="hljs-number">1</span><br>                key += <span class="hljs-number">1</span><br>            x += <span class="hljs-number">1</span><br>            y += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>):<br>            L[n // <span class="hljs-number">2</span>][n // <span class="hljs-number">2</span>] = key<br>        <span class="hljs-keyword">return</span> L<br></code></pre></td></tr></table></figure><p>我感觉我的代码比题解写得好</p><h2 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h2><p>跑了本地的DCTGAN在adult数据集上的实验，对比了下。后续换数据集做。</p>]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>22-10-28</title>
    <link href="/2022/10/28/22-10-28/"/>
    <url>/2022/10/28/22-10-28/</url>
    
    <content type="html"><![CDATA[<h1 id="近期总结"><a href="#近期总结" class="headerlink" title="近期总结"></a>近期总结</h1><h2 id="力扣"><a href="#力扣" class="headerlink" title="力扣"></a>力扣</h2><h3 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">力扣题目链接</a></p><p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p><p>示例 1： 输入：nums &#x3D; [-4,-1,0,3,10] 输出：[0,1,9,16,100] 解释：平方后，数组变为 [16,1,0,9,100]，排序后，数组变为 [0,1,9,16,100]</p><p>示例 2： 输入：nums &#x3D; [-7,-3,2,3,11] 输出：[4,9,9,49,121]</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>可以使用双指针，一个从头一个从尾遍历这个数组，头尾指针对应位置的值做平方，相互比较，放入<strong>新的长度为nums长度的数组</strong>，可以再定义新数组是我没想到的….</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sortedSquares</span>(<span class="hljs-params">self, nums</span>):<br>        length = <span class="hljs-built_in">len</span>(nums)<br>        m, n,k = <span class="hljs-number">0</span>, length - <span class="hljs-number">1</span>, length - <span class="hljs-number">1</span><br>        nums2 = [<span class="hljs-number">0</span>] * length<br>        <span class="hljs-keyword">while</span> m &lt;= n:<br>            <span class="hljs-keyword">if</span> (nums[m] * nums[m] &gt;= nums[n] * nums[n]):<br>                nums2[k] = nums[m] * nums[m]<br>                k = k-<span class="hljs-number">1</span><br>                m += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                nums2[k] = nums[n]*nums[n]<br>                k = k-<span class="hljs-number">1</span><br>                n -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> nums2<br></code></pre></td></tr></table></figure><h3 id="209-长度最小子数组"><a href="#209-长度最小子数组" class="headerlink" title="209.长度最小子数组"></a>209.长度最小子数组</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">力扣题目链接(opens new window)</a></p><p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0。</p><p>示例：</p><p>输入：s &#x3D; 7, nums &#x3D; [2,3,1,2,4,3] 输出：2 解释：子数组 [4,3] 是该条件下的长度最小的子数组。</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>如果是使用暴力解法，就是两层for循环遍历所有子串，寻找最小值的问题。还可以使用<strong>双指针滑动窗口</strong>来做。简单来说就是<strong>小于加右，大于删左</strong>。</p><ul><li>窗口内是什么？</li><li>如何移动窗口的起始位置？</li><li>如何移动窗口的结束位置？</li></ul><p>窗口就是 满足其和 ≥ target 的长度最小的 连续 子数组。</p><p>窗口的起始位置如何移动：如果当前窗口的值大于target了，窗口就要向前移动了（也就是该缩小了）。</p><p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。</p><p>可以发现<strong>滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将O(n^2)暴力解法降为O(n)。</strong></p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minSubArrayLen</span>(<span class="hljs-params">self, target, nums</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        :type target: int</span><br><span class="hljs-string">        :type nums: List[int]</span><br><span class="hljs-string">        :rtype: int</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        left = <span class="hljs-number">0</span><br>        <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>        result = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-built_in">sum</span> += nums[i]<br>            <span class="hljs-keyword">while</span> <span class="hljs-built_in">sum</span> &gt;= target:<br>                result = <span class="hljs-built_in">min</span>(result, i - left + <span class="hljs-number">1</span>)<br>                <span class="hljs-built_in">sum</span> -= nums[left]<br>                left += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> result == <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>) <span class="hljs-keyword">else</span> result<br></code></pre></td></tr></table></figure><h2 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h2><p>唉，要开始写论文了，自己都说服不了自己那该怎么编呢，好烦啊，因为这个事居然失眠了，我的天。</p><ul><li>实验需要和本地模型做对比</li><li>对比不同数据集</li><li>和其他fed方法做对比</li></ul><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>论文呢不知道什么时候论文能写完，刘老师12月8日走，希望可以让我随便投一篇3000块的EI检索放我实习，突然想起来还有那个B灵活就业裂开裂开</p>]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tue Oct 25 2022 00:00:00 GMT+0800 (中国标准时间)</title>
    <link href="/2022/10/25/22-10-25/"/>
    <url>/2022/10/25/22-10-25/</url>
    
    <content type="html"><![CDATA[<h1 id="近期总结"><a href="#近期总结" class="headerlink" title="近期总结"></a>近期总结</h1><h2 id="力扣"><a href="#力扣" class="headerlink" title="力扣"></a>力扣</h2><p>最近开始刷代码随想录，本以为是12月蓝桥杯开始，结果是明年4月份，无语子</p><h3 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704.二分查找"></a>704.二分查找</h3><p><a href="https://leetcode.cn/problems/binary-search/">力扣题目链接(opens new window)</a></p><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p>示例 1:</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入: nums = [-1,0,3,5,9,12], target =<span class="hljs-number"> 9 </span>    <br>输出:<span class="hljs-number"> 4 </span>      <br>解释:<span class="hljs-number"> 9 </span>出现在 nums 中并且下标为<span class="hljs-number"> 4 </span>    <br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">输入: nums = [-1,0,3,5,9,12], target = 2     <br>输出: -1        <br>解释: 2 不存在 nums 中因此返回 -1        <br></code></pre></td></tr></table></figure><p>提示：</p><ul><li>你可以假设 nums 中的所有元素是不重复的。</li><li>n 将在 [1, 10000]之间。</li><li>nums 的每个元素都将在 [-9999, 9999]之间。</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self,nums,target</span>):<br>        left = <span class="hljs-number">0</span><br>        right = <span class="hljs-built_in">len</span>(nums) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span>(left&lt;=right):<br>            mid = (left + right) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span>(target &lt; nums[mid]):<br>                right = mid-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span>(target &gt; nums[mid]):<br>                left = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span>(target == nums[mid]):<br>                <span class="hljs-keyword">return</span> mid<br></code></pre></td></tr></table></figure><h4 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h4><p>二分查找很简单，没啥好说的。。。。</p><h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27.移除元素"></a>27.移除元素</h3><p><a href="https://leetcode.cn/problems/remove-element/">力扣题目链接(opens new window)</a></p><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并<strong>原地</strong>修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>示例 1: 给定 nums &#x3D; [3,2,2,3], val &#x3D; 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。</p><p>示例 2: 给定 nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>双指针法（快慢指针法）： <strong>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</strong></p><p>定义快慢指针</p><ul><li>快指针：寻找新数组的元素 ，新数组就是不含有<strong>目标元素的数组</strong></li><li>慢指针：指向更新 新数组下标的位置</li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeElement</span>(<span class="hljs-params">self, nums, val</span>):<br>        m,n = <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> m &lt; <span class="hljs-built_in">len</span>(nums):<br>            <span class="hljs-keyword">if</span>(nums[m] != val):<br>                nums[n] = nums[m]<br>                n += <span class="hljs-number">1</span><br>            m += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> n<br></code></pre></td></tr></table></figure><h4 id="理解-1"><a href="#理解-1" class="headerlink" title="理解"></a>理解</h4><p>这里m是快指针，指向数组里不等于目标元素的位置，n指向数组中等于目标元素的位置，两者进行替换，即可覆盖目标元素，n即为最后数组的长度。这个思路学到了！！</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>最近把本地的FedDCTGAN写完了，开始跑实验，目前是在做一个数据集在不同缺失率下填补生成效果的实验，使用了三种评估模型（决策树，感知机，svm），三种评估指标（acc，auc，F1）。svm的实验莫名其妙训练很慢，感知机和svm都在不停的在调参想结果看着好看点。结果大概是这个样子：</p><p><img src="/22-10-25/1.png"></p><p>也算是有点进展。接下来是换数据集做同样的实验。他哪里有现成的数据集但是我不太想找他要，魔羯座记仇应该是真的，我心里还是没有释怀。把他那边代码拿过来，创建py文件自动生成author还是chy，他唯一改的四行代码还是错的，没有计算图怎么算损失，逆天中的逆天。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>好像没啥说的，希望可以顺利毕业吧，事情好多啊，腰突又有点反复，不知道膝盖后面的酸痛跟腰突有没有关系，唉。</p>]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腰突康复日记二</title>
    <link href="/2022/07/30/%E8%85%B0%E7%AA%81%E5%BA%B7%E5%A4%8D%E6%97%A5%E8%AE%B0%E4%BA%8C/"/>
    <url>/2022/07/30/%E8%85%B0%E7%AA%81%E5%BA%B7%E5%A4%8D%E6%97%A5%E8%AE%B0%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="腰突康复日记二"><a href="#腰突康复日记二" class="headerlink" title="腰突康复日记二"></a>腰突康复日记二</h1><h2 id="昨日训练"><a href="#昨日训练" class="headerlink" title="昨日训练"></a>昨日训练</h2><ul><li><p><strong>篮球</strong></p><p>昨天浅浅打了一下篮球，通过这几天的康复训练现在感觉跟正常人差不多了，除了尾椎部分会有压痛(不压不痛)，基本大腿和臀部没有不适，在实验室也坐的住了，但是昨天打篮球还是有点怵，不太敢跳，虽然我一直是老年人打法养生篮球，但是感觉和之前还是有着明显不同。正常腰突患者来说是不建议进行篮球运动的，但是昨天打完篮球后今天明显大腿和臀部舒服很多，不过肩膀会酸，这也是没办法的事，总之感觉腰突有在变好。</p></li><li><p><strong>康复性训练</strong></p><p>昨天做了臀桥60，背部训练(动作名字忘了)，还有日常的拉伸，这个拉伸和臀桥感觉很有用，小燕飞我感觉做了反而不是很舒服</p></li></ul><h2 id="学到的东西"><a href="#学到的东西" class="headerlink" title="学到的东西"></a>学到的东西</h2><p>今天看了同样腰突的UP主分享的资料截了两张图</p><p><img src="/%E8%85%B0%E7%AA%81%E5%BA%B7%E5%A4%8D%E6%97%A5%E8%AE%B0%E4%BA%8C/1.PNG"></p><p><img src="/%E8%85%B0%E7%AA%81%E5%BA%B7%E5%A4%8D%E6%97%A5%E8%AE%B0%E4%BA%8C/2.PNG"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>赵爽犀利哥一般的发型</p><p><img src="/%E8%85%B0%E7%AA%81%E5%BA%B7%E5%A4%8D%E6%97%A5%E8%AE%B0%E4%BA%8C/3.JPG"></p></li><li><p>乡村基的可乐变小杯了，但是今天知道了可乐是可以续杯的</p><p><img src="/%E8%85%B0%E7%AA%81%E5%BA%B7%E5%A4%8D%E6%97%A5%E8%AE%B0%E4%BA%8C/4.JPG"></p></li><li><p>拍到的好看的图片</p><p><img src="/%E8%85%B0%E7%AA%81%E5%BA%B7%E5%A4%8D%E6%97%A5%E8%AE%B0%E4%BA%8C/5.JPG"></p><p><img src="/%E8%85%B0%E7%AA%81%E5%BA%B7%E5%A4%8D%E6%97%A5%E8%AE%B0%E4%BA%8C/6.JPG"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>腰椎间盘突出</category>
      
    </categories>
    
    
    <tags>
      
      <tag>腰椎间盘突出</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腰突康复日记</title>
    <link href="/2022/07/28/%E8%85%B0%E7%AA%81%E5%BA%B7%E5%A4%8D%E6%97%A5%E8%AE%B0/"/>
    <url>/2022/07/28/%E8%85%B0%E7%AA%81%E5%BA%B7%E5%A4%8D%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="腰突康复日记"><a href="#腰突康复日记" class="headerlink" title="腰突康复日记"></a>腰突康复日记</h1><p>之前一直感觉自己大腿和臀部后方不舒服，我以为是因为自己经常翘二郎腿造成的，但是我已经很久没翘二郎腿了，结合自己尾椎处压迫会比较痛，怀疑自己腰椎间盘突出，果不其然真的突出了，虽然是轻度膨出但是也让我很难受，23岁肩膀坏了，现在又是腰突，唉好烦。</p><p><img src="/%E8%85%B0%E7%AA%81%E5%BA%B7%E5%A4%8D%E6%97%A5%E8%AE%B0/3.JPG"></p><h1 id="对策"><a href="#对策" class="headerlink" title="对策"></a>对策</h1><p>怎么办呢？查了很多资料，反正做手术是不可能做手术的，那就保守康复训练，这几天每天晚上都在做运动，拿出了自己很久没用过的瑜伽垫，小燕飞、臀桥、平板支持。有点作用，感觉自己臀部没有很痛了，起码在实验室坐的住，最近真的挺丧的…..</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><img src="/%E8%85%B0%E7%AA%81%E5%BA%B7%E5%A4%8D%E6%97%A5%E8%AE%B0/1.JPG"></p><p>周六还是周天从寝室回实验室，天空在实验楼玻璃上的反射，还挺好看的</p><p><img src="/%E8%85%B0%E7%AA%81%E5%BA%B7%E5%A4%8D%E6%97%A5%E8%AE%B0/2.JPG"></p><p>某天晚上走路回寝室，看到一个氢气球，记得是谁说得来着好像是大张伟说“寂寞的像大风里的塑料袋”，所以我这是大风里的氢气球。</p><p>高中以后就没有天天写日记了，这学期来了用Pendo随手记了一些，昊天前段时间走了，在KTV唱歌，是《倒带人生》唱到“偶尔想起你，自言自语，点点滴滴，幸福是个秘密，享受却不知情”突然控制不住的流泪，确实幸福是个秘密，享受却不知情，珍惜当下吧。</p><p><code>回忆只剩下局部，就算和你倒带人生，能失而复得</code></p>]]></content>
    
    
    <categories>
      
      <category>腰椎间盘突出</category>
      
    </categories>
    
    
    <tags>
      
      <tag>腰椎间盘突出</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2022/05/30/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/30/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式是指一个类里只有一个对象</p><h2 id="Java实现单例模式"><a href="#Java实现单例模式" class="headerlink" title="Java实现单例模式"></a>Java实现单例模式</h2><h3 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h3><p>饿汉式是指无论如何都会创建一个实例</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> weight;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(<span class="hljs-type">int</span> age,String name,<span class="hljs-type">double</span> weight)</span>&#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.weight = weight;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Person</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">23</span>,<span class="hljs-string">&quot;chy&quot;</span>,<span class="hljs-number">110.1</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Person <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> Person.getInstance();<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> Person.getInstance();<br>        System.out.println(p1==p2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到在代码构造方法为<code>private</code>是的外部无法通过<code>new</code>得到新的对象，代码中提供了一个<code>getInstance</code>方法返回我们创建好的实例对象。</p><p>运行效果：</p><p><img src="/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/image-20220530161957159.png" alt="image-20220530161957159"></p><p>可以看到初始化的<code>p1,p2</code>是同一个对象。</p><h3 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h3><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> weight;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(<span class="hljs-type">int</span> age, String name, <span class="hljs-type">double</span> weight)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.weight = weight;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Person instance;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Person <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == instance) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">23</span>,<span class="hljs-string">&quot;chy&quot;</span>,<span class="hljs-number">110.1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> Person.getInstance();<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> Person.getInstance();<br>        System.out.println(p1 == p2);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在代码中，只有调用<code>getInsatance</code>时才会初始化对象，运行效果如下：</p><p><img src="/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/image-20220530162210384.png" alt="image-20220530162210384"></p><p>可以看到<code>p1,p2</code>指向的是同一个对象。这里<code>if (null == instance)</code>null写在判断条件的前面，C语言习惯这么写防止空指针错误，不知道Java有没有需要这么写。</p><h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><p>static:静态的，用于修饰成员(成员变量，成员方法);</p><ul><li><p>被static所修饰的变量或者方法会储存在数据共享区;</p></li><li><p>被static修饰后的成员变量只有一份！</p></li><li><p>当成员被static修饰之后，就多了一种访问方式，除了可以被对象调用之外，还可以直接被类名调用，(类名.静态成员);</p></li><li><p>static的特点：</p><ul><li>随着类的加载而被加载;</li><li>优先于对象存在;</li><li>被所有对象共享;</li></ul></li></ul><h2 id="Python单例模式"><a href="#Python单例模式" class="headerlink" title="Python单例模式"></a>Python单例模式</h2><h3 id="装饰器实现单例模式"><a href="#装饰器实现单例模式" class="headerlink" title="装饰器实现单例模式"></a>装饰器实现单例模式</h3><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">singleton</span>(<span class="hljs-params">cls</span>):<br>    _instance = &#123;&#125;<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> _instance:<br>            _instance[cls] = cls()<br>        <span class="hljs-keyword">return</span> _instance[cls]<br>    <span class="hljs-keyword">return</span> inner<br><br><span class="hljs-meta">@singleton</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    cls1 = test()<br>    cls2 = test()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(cls1))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(cls2))<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/image-20220530170108919.png" alt="image-20220530170108919"></p><p>可以看到两个对象id相同</p><h3 id="new-方法实现单例模式"><a href="#new-方法实现单例模式" class="headerlink" title="__new__方法实现单例模式"></a><code>__new__</code>方法实现单例模式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>:<br>    _instance = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):<br>        <span class="hljs-keyword">if</span> cls._instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            cls._instance = <span class="hljs-built_in">super</span>(Singleton, cls).__new__(cls,*args,**kwargs)<br>        <span class="hljs-keyword">return</span> cls._instance<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br>test1 = Singleton()<br>test2 = Singleton()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(test1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(test2))<br><br></code></pre></td></tr></table></figure><p>运行效果如下：</p><p><img src="/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/image-20220530170916552.png" alt="image-20220530170916552"></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Python</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自动打卡脚本</title>
    <link href="/2022/05/27/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1%E8%84%9A%E6%9C%AC/"/>
    <url>/2022/05/27/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p>使用此脚本需要抓微信的<code>openid</code>，这里以苹果Stream抓包工具为例，教程如下：</p><ul><li>打开Stream，点击开始抓包</li><li>点开微信进入we重邮小程序</li><li>点击下方的资讯后退出微信</li><li>打开Stream，点击停止抓包，查看抓包历史找到<code>url</code>里带<code>news</code>这个字段的请求，即可获取<code>openid</code></li></ul><h2 id="Server酱"><a href="#Server酱" class="headerlink" title="Server酱"></a>Server酱</h2><p>可以查看打卡结果，并推送到微信。</p><p>server酱链接为：<a href="https://sct.ftqq.com/forward">https://sct.ftqq.com/forward</a></p><p>拿到这个apikey</p><p><img src="/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1%E8%84%9A%E6%9C%AC/image-20220527015507038.png" alt="image-20220527015507038"></p><h2 id="脚本部署"><a href="#脚本部署" class="headerlink" title="脚本部署"></a>脚本部署</h2><p>这里使用的是Github Action</p><ul><li><p>将此项目fork到自己的仓库</p></li><li><p>点击<code>setting</code>设置密钥，填写对应字段，<code>SERVER</code>为SERVER酱apikey，<code>XH</code>为学号，<code>OPENID</code>为上面抓包抓到的<code>openid</code></p><p><img src="/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1%E8%84%9A%E6%9C%AC/image-20220527015431937.png" alt="image-20220527015431937"></p><p><img src="/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1%E8%84%9A%E6%9C%AC/image-20220527015538526.png" alt="image-20220527015538526"></p></li><li><p>修改<code>自动打卡.py</code>中的姓名，性别，地址，详细地址字段</p><p><img src="/%E8%87%AA%E5%8A%A8%E6%89%93%E5%8D%A1%E8%84%9A%E6%9C%AC/image-20220527015842271.png" alt="image-20220527015842271"></p></li></ul><p><strong>到这里所有的配置就已经完成了</strong></p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>该脚本只是本人闲来无事开发玩的，疫情期间注意安全，该打卡打卡，使用此脚本造成的任何后果与本人无关</p><p>链接：<a href="https://github.com/HeliumzzZ/CQUPT-MRDK">https://github.com/HeliumzzZ/CQUPT-MRDK</a></p>]]></content>
    
    
    <categories>
      
      <category>自动打卡脚本</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java五子棋二</title>
    <link href="/2022/05/20/Java%E4%BA%94%E5%AD%90%E6%A3%8B%E4%BA%8C/"/>
    <url>/2022/05/20/Java%E4%BA%94%E5%AD%90%E6%A3%8B%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="人工智障"><a href="#人工智障" class="headerlink" title="人工智障"></a>人工智障</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我这里的人工智障使用的是权值法，就是计算当前棋盘每一个位置的权值，在权值高的位置下棋。当然还有更高级的算法，比如”五元组“，”决策树“等，时间有限，用了最简单的一种。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="设置棋局"><a href="#设置棋局" class="headerlink" title="设置棋局"></a>设置棋局</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs Java">map.put(<span class="hljs-string">&quot;01&quot;</span>, <span class="hljs-number">17</span>);<span class="hljs-comment">//眠1连</span><br>        map.put(<span class="hljs-string">&quot;02&quot;</span>, <span class="hljs-number">12</span>);<span class="hljs-comment">//眠1连</span><br>        map.put(<span class="hljs-string">&quot;001&quot;</span>, <span class="hljs-number">17</span>);<span class="hljs-comment">//眠1连</span><br>        map.put(<span class="hljs-string">&quot;002&quot;</span>, <span class="hljs-number">12</span>);<span class="hljs-comment">//眠1连</span><br>        map.put(<span class="hljs-string">&quot;0001&quot;</span>, <span class="hljs-number">17</span>);<span class="hljs-comment">//眠1连</span><br>        map.put(<span class="hljs-string">&quot;0002&quot;</span>, <span class="hljs-number">12</span>);<span class="hljs-comment">//眠1连</span><br><br>        map.put(<span class="hljs-string">&quot;0102&quot;</span>, <span class="hljs-number">17</span>);<span class="hljs-comment">//眠1连，15</span><br>        map.put(<span class="hljs-string">&quot;0201&quot;</span>, <span class="hljs-number">12</span>);<span class="hljs-comment">//眠1连，10</span><br>        map.put(<span class="hljs-string">&quot;0012&quot;</span>, <span class="hljs-number">15</span>);<span class="hljs-comment">//眠1连，15</span><br>        map.put(<span class="hljs-string">&quot;0021&quot;</span>, <span class="hljs-number">10</span>);<span class="hljs-comment">//眠1连，10</span><br>        map.put(<span class="hljs-string">&quot;01002&quot;</span>, <span class="hljs-number">19</span>);<span class="hljs-comment">//眠1连，15</span><br>        map.put(<span class="hljs-string">&quot;02001&quot;</span>, <span class="hljs-number">14</span>);<span class="hljs-comment">//眠1连，10</span><br>        map.put(<span class="hljs-string">&quot;00102&quot;</span>, <span class="hljs-number">17</span>);<span class="hljs-comment">//眠1连，15</span><br>        map.put(<span class="hljs-string">&quot;00201&quot;</span>, <span class="hljs-number">12</span>);<span class="hljs-comment">//眠1连，10</span><br>        map.put(<span class="hljs-string">&quot;00012&quot;</span>, <span class="hljs-number">15</span>);<span class="hljs-comment">//眠1连，15</span><br>        map.put(<span class="hljs-string">&quot;00021&quot;</span>, <span class="hljs-number">10</span>);<span class="hljs-comment">//眠1连，10</span><br><br>        map.put(<span class="hljs-string">&quot;01000&quot;</span>, <span class="hljs-number">21</span>);<span class="hljs-comment">//活1连，15</span><br>        map.put(<span class="hljs-string">&quot;02000&quot;</span>, <span class="hljs-number">16</span>);<span class="hljs-comment">//活1连，10</span><br>        map.put(<span class="hljs-string">&quot;00100&quot;</span>, <span class="hljs-number">19</span>);<span class="hljs-comment">//活1连，15</span><br>        map.put(<span class="hljs-string">&quot;00200&quot;</span>, <span class="hljs-number">14</span>);<span class="hljs-comment">//活1连，10</span><br>        map.put(<span class="hljs-string">&quot;00010&quot;</span>, <span class="hljs-number">17</span>);<span class="hljs-comment">//活1连，15</span><br>        map.put(<span class="hljs-string">&quot;00020&quot;</span>, <span class="hljs-number">12</span>);<span class="hljs-comment">//活1连，10</span><br>        map.put(<span class="hljs-string">&quot;00001&quot;</span>, <span class="hljs-number">15</span>);<span class="hljs-comment">//活1连，15</span><br>        map.put(<span class="hljs-string">&quot;00002&quot;</span>, <span class="hljs-number">10</span>);<span class="hljs-comment">//活1连，10</span><br><br>        <span class="hljs-comment">//被堵住</span><br>        map.put(<span class="hljs-string">&quot;0101&quot;</span>, <span class="hljs-number">65</span>);<span class="hljs-comment">//眠2连，40</span><br>        map.put(<span class="hljs-string">&quot;0202&quot;</span>, <span class="hljs-number">60</span>);<span class="hljs-comment">//眠2连，30</span><br>        map.put(<span class="hljs-string">&quot;0110&quot;</span>, <span class="hljs-number">65</span>);<span class="hljs-comment">//眠2连，40</span><br>        map.put(<span class="hljs-string">&quot;0220&quot;</span>, <span class="hljs-number">60</span>);<span class="hljs-comment">//眠2连，30</span><br>        map.put(<span class="hljs-string">&quot;011&quot;</span>, <span class="hljs-number">65</span>);<span class="hljs-comment">//眠2连，40</span><br>        map.put(<span class="hljs-string">&quot;022&quot;</span>, <span class="hljs-number">60</span>);<span class="hljs-comment">//眠2连，30</span><br>        map.put(<span class="hljs-string">&quot;0011&quot;</span>, <span class="hljs-number">65</span>);<span class="hljs-comment">//眠2连，40</span><br>        map.put(<span class="hljs-string">&quot;0022&quot;</span>, <span class="hljs-number">60</span>);<span class="hljs-comment">//眠2连，30</span><br><br>        map.put(<span class="hljs-string">&quot;01012&quot;</span>, <span class="hljs-number">65</span>);<span class="hljs-comment">//眠2连，40</span><br>        map.put(<span class="hljs-string">&quot;02021&quot;</span>, <span class="hljs-number">60</span>);<span class="hljs-comment">//眠2连，30</span><br>        map.put(<span class="hljs-string">&quot;01102&quot;</span>, <span class="hljs-number">65</span>);<span class="hljs-comment">//眠2连，40</span><br>        map.put(<span class="hljs-string">&quot;02201&quot;</span>, <span class="hljs-number">60</span>);<span class="hljs-comment">//眠2连，30</span><br>        map.put(<span class="hljs-string">&quot;00112&quot;</span>, <span class="hljs-number">65</span>);<span class="hljs-comment">//眠2连，40</span><br>        map.put(<span class="hljs-string">&quot;00221&quot;</span>, <span class="hljs-number">60</span>);<span class="hljs-comment">//眠2连，30</span><br><br>        map.put(<span class="hljs-string">&quot;01010&quot;</span>, <span class="hljs-number">75</span>);<span class="hljs-comment">//活2连，40</span><br>        map.put(<span class="hljs-string">&quot;02020&quot;</span>, <span class="hljs-number">70</span>);<span class="hljs-comment">//活2连，30</span><br>        map.put(<span class="hljs-string">&quot;01100&quot;</span>, <span class="hljs-number">75</span>);<span class="hljs-comment">//活2连，40</span><br>        map.put(<span class="hljs-string">&quot;02200&quot;</span>, <span class="hljs-number">70</span>);<span class="hljs-comment">//活2连，30</span><br>        map.put(<span class="hljs-string">&quot;00110&quot;</span>, <span class="hljs-number">75</span>);<span class="hljs-comment">//活2连，40</span><br>        map.put(<span class="hljs-string">&quot;00220&quot;</span>, <span class="hljs-number">70</span>);<span class="hljs-comment">//活2连，30</span><br>        map.put(<span class="hljs-string">&quot;00011&quot;</span>, <span class="hljs-number">75</span>);<span class="hljs-comment">//活2连，40</span><br>        map.put(<span class="hljs-string">&quot;00022&quot;</span>, <span class="hljs-number">70</span>);<span class="hljs-comment">//活2连，30</span><br><br>        <span class="hljs-comment">//被堵住</span><br>        map.put(<span class="hljs-string">&quot;0111&quot;</span>, <span class="hljs-number">150</span>);<span class="hljs-comment">//眠3连，100</span><br>        map.put(<span class="hljs-string">&quot;0222&quot;</span>, <span class="hljs-number">140</span>);<span class="hljs-comment">//眠3连，80</span><br><br>        map.put(<span class="hljs-string">&quot;01112&quot;</span>, <span class="hljs-number">150</span>);<span class="hljs-comment">//眠3连，100</span><br>        map.put(<span class="hljs-string">&quot;02221&quot;</span>, <span class="hljs-number">140</span>);<span class="hljs-comment">//眠3连，80</span><br><br>        map.put(<span class="hljs-string">&quot;01101&quot;</span>, <span class="hljs-number">1000</span>);<span class="hljs-comment">//活3连，130</span><br>        map.put(<span class="hljs-string">&quot;02202&quot;</span>, <span class="hljs-number">800</span>);<span class="hljs-comment">//活3连，110</span><br>        map.put(<span class="hljs-string">&quot;01011&quot;</span>, <span class="hljs-number">1000</span>);<span class="hljs-comment">//活3连，130</span><br>        map.put(<span class="hljs-string">&quot;02022&quot;</span>, <span class="hljs-number">800</span>);<span class="hljs-comment">//活3连，110</span><br>        map.put(<span class="hljs-string">&quot;01110&quot;</span>, <span class="hljs-number">1000</span>);<span class="hljs-comment">//活3连</span><br>        map.put(<span class="hljs-string">&quot;02220&quot;</span>, <span class="hljs-number">800</span>);<span class="hljs-comment">//活3连</span><br><br>        map.put(<span class="hljs-string">&quot;01111&quot;</span>, <span class="hljs-number">3500</span>);<span class="hljs-comment">//4连，300</span><br>        map.put(<span class="hljs-string">&quot;02222&quot;</span>, <span class="hljs-number">3500</span>);<span class="hljs-comment">//4连，280</span><br></code></pre></td></tr></table></figure><p>我们使用哈希表来存储每个棋局对应的分数，不了解什么是哈希表的可以复习一下基础的出具结构，如上代码所示。</p><h3 id="计算权值"><a href="#计算权值" class="headerlink" title="计算权值"></a>计算权值</h3><h4 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h4><p>遍历棋盘的每一个点，与之相邻5x5区域内的棋局情况，计算权值。</p><h4 id="具体实现-1"><a href="#具体实现-1" class="headerlink" title="具体实现"></a>具体实现</h4><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] setValue() &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chessArr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; chessArr.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (chessArr[i][j] == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0&quot;</span>;<br>                    <span class="hljs-comment">//向右</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">jmax</span> <span class="hljs-operator">=</span> Math.min(<span class="hljs-number">14</span>, j + <span class="hljs-number">4</span>);<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> j + <span class="hljs-number">1</span>; k &lt; jmax; k++) &#123;<br><br>                        code += chessArr[i][k];<br><br>                    &#125;<br>                    <span class="hljs-type">Integer</span> <span class="hljs-variable">weightright</span> <span class="hljs-operator">=</span> map.get(code);<br>                    <span class="hljs-keyword">if</span> (weightright != <span class="hljs-literal">null</span>) &#123;<br>                        value[i][j] += weightright;<br><br>                    &#125;<br>                    code = <span class="hljs-string">&quot;0&quot;</span>;<br>                    <span class="hljs-comment">//向左</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">jmin</span> <span class="hljs-operator">=</span> Math.max(<span class="hljs-number">0</span>, j - <span class="hljs-number">4</span>);<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> j - <span class="hljs-number">1</span>; k &gt;= jmin; k--) &#123;<br><br>                        code += chessArr[i][k];<br><br>                    &#125;<br>                    <span class="hljs-type">Integer</span> <span class="hljs-variable">weightleft</span> <span class="hljs-operator">=</span> map.get(code);<br>                    <span class="hljs-keyword">if</span> (weightleft != <span class="hljs-literal">null</span>) &#123;<br>                        value[i][j] += weightleft;<br><br>                    &#125;<br></code></pre></td></tr></table></figure><p>这里的代码只给了向左和向右的判断，读者可以自行拓展（当然也没人读）。这里的<code>code</code>是一个字符串，在<code>Java</code>中，字符串与任何数据类型的数据相加得到的都是字符串。使用此字符串来获得哈希表中的权值。<code>unionWeight</code>函数是判断这个点八个方向连线的权值，代码如下：（是一点小优化，但是也没啥用，还是人工智障）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">unionWeight</span><span class="hljs-params">(Integer a, Integer b)</span> &#123;<br>    <span class="hljs-comment">//必须要先判断a,b两个数值是不是null</span><br>    <span class="hljs-keyword">if</span> ((a == <span class="hljs-literal">null</span>) || (b == <span class="hljs-literal">null</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//一一</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((a &gt;= <span class="hljs-number">10</span>) &amp;&amp; (a &lt;= <span class="hljs-number">25</span>) &amp;&amp; (b &gt;= <span class="hljs-number">10</span>) &amp;&amp; (b &lt;= <span class="hljs-number">25</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">60</span>;<br>        <span class="hljs-comment">//一二、二一</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (((a &gt;= <span class="hljs-number">10</span>) &amp;&amp; (a &lt;= <span class="hljs-number">25</span>) &amp;&amp; (b &gt;= <span class="hljs-number">60</span>) &amp;&amp; (b &lt;= <span class="hljs-number">80</span>)) || ((a &gt;= <span class="hljs-number">60</span>) &amp;&amp; (a &lt;= <span class="hljs-number">80</span>) &amp;&amp; (b &gt;= <span class="hljs-number">10</span>) &amp;&amp; (b &lt;= <span class="hljs-number">25</span>)))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">800</span>;<br>        <span class="hljs-comment">//一三、三一、二二</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (((a &gt;= <span class="hljs-number">10</span>) &amp;&amp; (a &lt;= <span class="hljs-number">25</span>) &amp;&amp; (b &gt;= <span class="hljs-number">140</span>) &amp;&amp; (b &lt;= <span class="hljs-number">1000</span>)) || ((a &gt;= <span class="hljs-number">140</span>) &amp;&amp; (a &lt;= <span class="hljs-number">1000</span>) &amp;&amp; (b &gt;= <span class="hljs-number">10</span>) &amp;&amp; (b &lt;= <span class="hljs-number">25</span>)) || ((a &gt;= <span class="hljs-number">60</span>) &amp;&amp; (a &lt;= <span class="hljs-number">80</span>) &amp;&amp; (b &gt;= <span class="hljs-number">60</span>) &amp;&amp; (b &lt;= <span class="hljs-number">80</span>)))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3000</span>;<br>        <span class="hljs-comment">//二三、三二</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (((a &gt;= <span class="hljs-number">60</span>) &amp;&amp; (a &lt;= <span class="hljs-number">80</span>) &amp;&amp; (b &gt;= <span class="hljs-number">140</span>) &amp;&amp; (b &lt;= <span class="hljs-number">1000</span>)) || ((a &gt;= <span class="hljs-number">140</span>) &amp;&amp; (a &lt;= <span class="hljs-number">1000</span>) &amp;&amp; (b &gt;= <span class="hljs-number">60</span>) &amp;&amp; (b &lt;= <span class="hljs-number">80</span>)))<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3000</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实开发一个东西思路很重要，每个方法的设计需要有思考，不然就要重构很多代码，或者变成了面型过程的东西，这次也踩了很多坑，重构代码很麻烦，项目仍有一些小bug，但是GUI程序Debug是真麻烦，就这吧。</p><p>代码放在了<a href="https://github.com/HeliumzzZ/JavaStudy">https://github.com/HeliumzzZ/JavaStudy</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>五子棋</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java五子棋一</title>
    <link href="/2022/05/19/Java%E4%BA%94%E5%AD%90%E6%A3%8B%E4%B8%80/"/>
    <url>/2022/05/19/Java%E4%BA%94%E5%AD%90%E6%A3%8B%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="五子棋"><a href="#五子棋" class="headerlink" title="五子棋"></a>五子棋</h1><p>今天来开发一个简单的五子棋游戏，我们需要实现以下这些功能：</p><ul><li>下棋</li><li>判断胜负</li><li>悔棋</li><li>人机模式</li></ul><p>接下来分不同的章节来对这些功能的实现进行讲解。</p><h2 id="下棋功能实现"><a href="#下棋功能实现" class="headerlink" title="下棋功能实现"></a>下棋功能实现</h2><h3 id="一-界面"><a href="#一-界面" class="headerlink" title="一 界面"></a>一 界面</h3><p>下棋我们首先应该创建一个界面，在这个界面上下棋，我们可以使用<code>Java</code>的<code>GUI</code>库来实现这个界面，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showUI</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-type">JFrame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>(<span class="hljs-string">&quot;五子棋&quot;</span>);<br>       frame.setSize(<span class="hljs-number">1200</span>,<span class="hljs-number">900</span>);<br>       frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>       frame.setLocationRelativeTo(<span class="hljs-literal">null</span>);<br><br>       <span class="hljs-type">MyJPanel</span> <span class="hljs-variable">panel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyJPanel</span>();<br>       frame.add(panel, BorderLayout.CENTER);<br>       <span class="hljs-type">JPanel</span> <span class="hljs-variable">jPanel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPanel</span>();<br>       jPanel.setPreferredSize(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dimension</span>(<span class="hljs-number">250</span>,<span class="hljs-number">80</span>));<br>       jPanel.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FlowLayout</span>());<br>       String[] btname = &#123;<span class="hljs-string">&quot;开始&quot;</span>,<span class="hljs-string">&quot;悔棋&quot;</span>,<span class="hljs-string">&quot;重新开始&quot;</span>,<span class="hljs-string">&quot;人机模式&quot;</span>&#125;;<br>       <span class="hljs-type">Mouse</span> <span class="hljs-variable">mouse</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mouse</span>();<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; btname.length;i++)<br>       &#123;<br>           <span class="hljs-type">JButton</span> <span class="hljs-variable">bt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(btname[i]);<br>           bt.setPreferredSize(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dimension</span>(<span class="hljs-number">200</span>,<span class="hljs-number">80</span>));<br>           bt.addActionListener(mouse);<br>           jPanel.add(bt);<br>       &#125;<br><br>       frame.add(jPanel,BorderLayout.EAST);<br>       frame.setVisible(<span class="hljs-literal">true</span>);<br><br>       <span class="hljs-type">Graphics</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> panel.getGraphics();<br>       mouse.setg(g);<br>       mouse.setPanel(panel);<br>       panel.addMouseListener(mouse);<br>       panel.setchessArr(mouse.getChessArr());<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们使用<code>JFrame</code>创建了一个窗体，使用<code>JPanel</code>给这个窗体设置了两个分区，分别存放棋盘和功能按钮，同时对棋盘和按钮添加监听器，这样可以监听到我们鼠标点击了哪个区域，运行效果如下：</p><p><img src="/Java%E4%BA%94%E5%AD%90%E6%A3%8B%E4%B8%80/image-20220519234024188.png" alt="image-20220519234024188"></p><p>其实进运行上述代码并不能出现棋盘，由于笔者已经开发完毕，就没有分开展示不同代码的功能，接下来讲解如何绘制棋盘。</p><h3 id="二-棋盘"><a href="#二-棋盘" class="headerlink" title="二 棋盘"></a>二 棋盘</h3><p>其实可以看到上述代码并不涉及棋盘的绘制的，我的棋盘绘制写在了<code>MyJPanel</code>这个<code>class</code>里，<code>MyJPanel</code>这个<code>class</code>继承了<code>JPanel</code>。为什么这里不直接使用<code>JPanel</code>是因为在我们每次拖拽界面时，<code>Java</code>都会调用<code>JPanel</code>中的<code>paint</code>方法对界面进行重绘，界面上的内容就会消失，我们所绘制的棋盘也就消失了，因此我们要将<code>paint</code>方法重写，在每次调用<code>paint</code>方法时对我们的棋盘进行重绘。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>    <span class="hljs-built_in">super</span>.paint(g);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; LINE; i++) &#123;<br>        g.drawLine(X0, Y0 + i * SIZE, X0 + (LINE - <span class="hljs-number">1</span>) * SIZE, Y0 + i * SIZE);<br>        g.drawLine(X0 + i * SIZE, Y0, X0 + i * SIZE, Y0 + (LINE - <span class="hljs-number">1</span>) * SIZE);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码中<code>for</code>循环里的<code>LINE</code>是定义在<code>Config</code>这个接口里，我们写代码时要尽量避免硬编码，我们可以将一些参数定义在接口里进行调用。<code>Config</code>的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Config</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">X0</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">Y0</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LINE</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CHESS</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">RULE</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>X0,Y0</code>代表我们棋盘起始点的坐标，<code>SIZE</code>代表棋盘每个格子的间距<code>LINE</code>代表我们要画多少根线。</p><h3 id="三-下棋"><a href="#三-下棋" class="headerlink" title="三 下棋"></a>三 下棋</h3><p>我们有了棋盘，接下来就是下棋功能的实现了。</p><p>在上面<strong>界面</strong>部分的代码中，我们可以看到有<code>Mouse</code>这个类，这个类继承了<code>MouseAdapter</code>，实现了<code>ActionListener</code>这个接口，我们需要使用这个类来来监听鼠标做了哪些事，<code>ActionListener</code>为按钮的监听器，我们可以看一下<code>ActionListener</code>和<code>MouseAdapter</code>的代码。</p><h4 id="ActionListener"><a href="#ActionListener" class="headerlink" title="ActionListener"></a>ActionListener</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> java.awt.event;<br><br><span class="hljs-keyword">import</span> java.util.EventListener;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ActionListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EventListener</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Invoked when an action occurs.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MouseAdapter"><a href="#MouseAdapter" class="headerlink" title="MouseAdapter"></a>MouseAdapter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MouseAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MouseListener</span>, MouseWheelListener, MouseMotionListener &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseClicked</span><span class="hljs-params">(MouseEvent e)</span> &#123;&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mousePressed</span><span class="hljs-params">(MouseEvent e)</span> &#123;&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseReleased</span><span class="hljs-params">(MouseEvent e)</span> &#123;&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseEntered</span><span class="hljs-params">(MouseEvent e)</span> &#123;&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseExited</span><span class="hljs-params">(MouseEvent e)</span> &#123;&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 1.6</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseWheelMoved</span><span class="hljs-params">(MouseWheelEvent e)</span>&#123;&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 1.6</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseDragged</span><span class="hljs-params">(MouseEvent e)</span>&#123;&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 1.6</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseMoved</span><span class="hljs-params">(MouseEvent e)</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们仅需要监听鼠标点击这一事件，因此我们只需要重写<code>MouseAdapter</code>中<code>mouseClick</code>这一方法即可。</p><h4 id="下棋"><a href="#下棋" class="headerlink" title="下棋"></a>下棋</h4><p>下棋这里我封装<code>drawChess</code>这个方法，我们知道我们点击棋盘上任何位置都会有一个坐标，但是我们的棋子必须落在棋盘的交点上，因此我们需要对坐标进行计算，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">drawChess</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-keyword">if</span> ((x - X0) % SIZE &gt; SIZE / <span class="hljs-number">2</span>) &#123;<br>        X = (x - X0) / SIZE + <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        X = (x - X0) / SIZE;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((y - Y0) % SIZE &gt; SIZE / <span class="hljs-number">2</span>) &#123;<br>        Y = (y - Y0) / SIZE + <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Y = (y - Y0) / SIZE;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (count == <span class="hljs-literal">true</span> &amp;&amp; chessArr[X][Y] == <span class="hljs-number">0</span>) &#123;<br>        g.setColor(Color.black);<br>        chessArr[X][Y] = <span class="hljs-number">1</span>;<br>        count = <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count == <span class="hljs-literal">false</span> &amp;&amp; chessArr[X][Y] == <span class="hljs-number">0</span>) &#123;<br>        g.setColor(Color.white);<br>        chessArr[X][Y] = <span class="hljs-number">2</span>;<br>        count = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    g.fillOval(X * SIZE + X0 - CHESS / <span class="hljs-number">2</span>, Y * SIZE + Y0 - CHESS / <span class="hljs-number">2</span>, CHESS, CHESS);<br>&#125;<br></code></pre></td></tr></table></figure><p>计算交点的逻辑很简单，首先我们传入当前鼠标点击位置的坐标<code>x,y</code>，计算他们和界面左上角坐标<code>X0,Y0</code>之间的距离除以<code>SIZE</code>，如果超过了<code>SIZE</code>的一半，那就对距离进行+1，没超过则保持不变。同时我们设置了一个二维数组来保存棋子落下的位置，黑棋记为”1“，白棋记为”2“，没有落子的部分为”0“。通过<code>count</code>这个布尔变量来切换棋子的颜色。接下来我们在<code>mouseClicked</code>中调用此方法，代码如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public void mouse<span class="hljs-constructor">Clicked(MouseEvent <span class="hljs-params">e</span>)</span> &#123;<br>        <span class="hljs-built_in">int</span> x = e.get<span class="hljs-constructor">X()</span>;<br>        <span class="hljs-built_in">int</span> y = e.get<span class="hljs-constructor">Y()</span>;<br>        draw<span class="hljs-constructor">Chess(<span class="hljs-params">x</span>, <span class="hljs-params">y</span>)</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>每次我们鼠标点击获取当前坐标，传入<code>drawChess</code>方法中进行绘制，现在我们就可以下棋了。运行效果如下：</p><p><img src="/Java%E4%BA%94%E5%AD%90%E6%A3%8B%E4%B8%80/image-20220520001609186.png" alt="image-20220520001609186"></p><h4 id="棋子重绘"><a href="#棋子重绘" class="headerlink" title="棋子重绘"></a>棋子重绘</h4><p>我们在下棋时已经将棋子存在了一个二维数组中，我们将这个数组传入<code>MyJPanel</code>这个类中，重写<code>paint</code>方法对棋子进行重绘。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt;chessArr.length;i++)<br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;chessArr.length;j++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(chessArr[i][j]==<span class="hljs-number">1</span>)<br>        &#123;<br>            g.setColor(Color.black);<br>            g.fillOval(i*SIZE+X0-CHESS/<span class="hljs-number">2</span>,j*SIZE+Y0-CHESS/<span class="hljs-number">2</span>,CHESS,CHESS);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(chessArr[i][j]==<span class="hljs-number">2</span>)<br>        &#123;<br>            g.setColor(Color.white);<br>            g.fillOval(i*SIZE+X0-CHESS/<span class="hljs-number">2</span>,j*SIZE+Y0-CHESS/<span class="hljs-number">2</span>,CHESS,CHESS);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="判断胜负"><a href="#判断胜负" class="headerlink" title="判断胜负"></a>判断胜负</h2><h3 id="一-实现逻辑"><a href="#一-实现逻辑" class="headerlink" title="一 实现逻辑"></a>一 实现逻辑</h3><p>当我们下一枚棋子，我们就遍历当前棋子坐标上下左右斜线这些方向有没有与他相同颜色的棋子，计算数量判断是否等于5。</p><h3 id="二-具体实现"><a href="#二-具体实现" class="headerlink" title="二 具体实现"></a>二 具体实现</h3><p>在我们下棋时已经将棋子存入了二维数组中，对当前棋子八个方向（左，右，上，下，右斜向上，右斜向下，左斜向上，左斜向下）进行遍历，计算同色棋子数量判断胜负。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> y; i &lt; chessArr.length; i++) &#123;<br>           <span class="hljs-keyword">if</span> (chessArr[x][y] == chessArr[x][i]) &#123;<br>               num++;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">break</span>;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> y - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>           <span class="hljs-keyword">if</span> (chessArr[x][y] == chessArr[x][i]) &#123;<br>               num++;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">break</span>;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">5</span>) &#123;<br>           num = <span class="hljs-number">0</span>;<br>       &#125;<br></code></pre></td></tr></table></figure><p>由于篇幅原因，这里只展示了判断上下两个方向的代码，读者可以自行拓展。现在我们就可以判断胜负了，运行效果如下：</p><p><img src="/Java%E4%BA%94%E5%AD%90%E6%A3%8B%E4%B8%80/image-20220520002732926.png" alt="image-20220520002732926"></p><h2 id="悔棋"><a href="#悔棋" class="headerlink" title="悔棋"></a>悔棋</h2><h3 id="一-实现逻辑-1"><a href="#一-实现逻辑-1" class="headerlink" title="一 实现逻辑"></a>一 实现逻辑</h3><p>悔棋我们只需要将最后一次下棋的棋子删除即可。</p><h3 id="二-具体实现-1"><a href="#二-具体实现-1" class="headerlink" title="二 具体实现"></a>二 具体实现</h3><p>我们需要定义一个<code>Chess</code>类来记录我们每一个棋子的坐标，将二维数组对应位置的元素设置为0，并对棋盘重绘即可。</p><h4 id="Chess类代码如下"><a href="#Chess类代码如下" class="headerlink" title="Chess类代码如下"></a><code>Chess</code>类代码如下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Chess</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> chessX,chessY;<br>    <span class="hljs-keyword">public</span> Color color;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> count;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Chess</span><span class="hljs-params">(<span class="hljs-type">int</span> chessX,<span class="hljs-type">int</span> chessY,<span class="hljs-type">boolean</span> count,Color color)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.chessX = chessX;<br>        <span class="hljs-built_in">this</span>.chessY = chessY;<br>        <span class="hljs-built_in">this</span>.color = color;<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="悔棋功能代码如下"><a href="#悔棋功能代码如下" class="headerlink" title="悔棋功能代码如下"></a>悔棋功能代码如下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>        btnText = e.getActionCommand();<br><br>        <span class="hljs-keyword">if</span> (btnText.equals(<span class="hljs-string">&quot;悔棋&quot;</span>)) &#123;<br>            <span class="hljs-type">Chess</span> <span class="hljs-variable">chess</span> <span class="hljs-operator">=</span> chessList.get(chessList.size() - <span class="hljs-number">1</span>);<br>            chessArr[chess.chessX][chess.chessY] = <span class="hljs-number">0</span>;<br>            count = !chess.count;<br>            panel.paint(g);<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>这里我们获取当前点击按钮的内容，若为悔棋则运行下面的代码。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>进行到这里，基本的功能就已经实现了。下一部分讲人机对战。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>五子棋</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>类与装饰器</title>
    <link href="/2022/05/18/%E7%B1%BB%E4%B8%8E%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <url>/2022/05/18/%E7%B1%BB%E4%B8%8E%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="类与装饰器"><a href="#类与装饰器" class="headerlink" title="类与装饰器"></a>类与装饰器</h2><p>之前写过有关装饰器的博客，但是没有涉及类装饰器，类装饰器到底是装饰类的装饰器还是类作为装饰器呢？</p><h3 id="类作为装饰器"><a href="#类作为装饰器" class="headerlink" title="类作为装饰器"></a>类作为装饰器</h3><h4 id="call方法"><a href="#call方法" class="headerlink" title="call方法"></a>call方法</h4><p>在了解类作为装饰器之前，首先要了解一下call方法，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self.name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;我是<span class="hljs-subst">&#123;self.name&#125;</span>&#x27;</span>)<br><br><br>p = Person(<span class="hljs-string">&#x27;chy&#x27;</span>)<br>p()<br></code></pre></td></tr></table></figure><p>我们在创建一个类时，写了<code>__call__</code>方法，可以让我们实例化出来的对象时<code>callable</code>的，也就是可以像方法一样调用。运行结果如下：</p><p><img src="/%E7%B1%BB%E4%B8%8E%E8%A3%85%E9%A5%B0%E5%99%A8/1.jpg"></p><h4 id="类作为装饰器-1"><a href="#类作为装饰器-1" class="headerlink" title="类作为装饰器"></a>类作为装饰器</h4><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Timer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, func</span>):<br>        self.func = func<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        start = time.time()<br>        ret = self.func(*args, **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Time: <span class="hljs-subst">&#123;time.time() - start&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">return</span> ret<br><br><br><span class="hljs-meta">@Timer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a + b<br><br><br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><p>运行效果如下：</p><p><img src="/%E7%B1%BB%E4%B8%8E%E8%A3%85%E9%A5%B0%E5%99%A8/2.jpg"></p><p>可能我们难以理解，但是有这个万能公式一切都好理解了，我们要关注<code>@Timer</code>到底做了什么，在一个函数上做装饰器，就等于装饰器调用这个函数，也就相当于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">add = Timer(add)<br></code></pre></td></tr></table></figure><p>这相当于把<code>add</code>这个函数转换成了<code>Timer</code>类的对象，<code>add</code>函数作为一个参数转移到了<code>self.func</code>里。其实与函数装饰器没有什么区别。</p><h4 id="类作为装饰器含参数"><a href="#类作为装饰器含参数" class="headerlink" title="类作为装饰器含参数"></a>类作为装饰器含参数</h4><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Timer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, prefix</span>):<br>        self.prefix = prefix<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kwargs</span>):<br>            start = time.time()<br><br>            ret = func(*args, **kwargs)<br>            end = time.time()<br><br>            <span class="hljs-built_in">print</span>(self.prefix, (end - start))<br>            <span class="hljs-keyword">return</span> ret<br><br>        <span class="hljs-keyword">return</span> wrapper<br>    <br><span class="hljs-meta">@Timer(<span class="hljs-params">prefix=<span class="hljs-string">&quot;curr_time:&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a + b<br><br><br><span class="hljs-built_in">print</span>(add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><br><br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E7%B1%BB%E4%B8%8E%E8%A3%85%E9%A5%B0%E5%99%A8/3.jpg"></p><p>上面的代码等价于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">add = Timer(prefix=<span class="hljs-string">&quot;curr_time&quot;</span>)(add)<br></code></pre></td></tr></table></figure><h3 id="装饰类的装饰器"><a href="#装饰类的装饰器" class="headerlink" title="装饰类的装饰器"></a>装饰类的装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_str</span>(<span class="hljs-params">cls</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(self.__dict__)<br><br>    cls.__str__ = __str__<br>    <span class="hljs-keyword">return</span> cls<br><br><br><span class="hljs-meta">@add_str</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyObject</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, a, b</span>):<br>        self.a = a<br>        self.b = b<br><br><br>o = MyObject(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(o)<br></code></pre></td></tr></table></figure><p>我们知道可以通过重写<code>__str__</code>方法改变打印一个实例对象的输出，上面的<code>add_str</code>函数就做了这样的事，运行结果如下：</p><p><img src="/%E7%B1%BB%E4%B8%8E%E8%A3%85%E9%A5%B0%E5%99%A8/4.jpg"></p><p>可能它不好理解，但是转换成等价形式就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">MyObject = add_str(MyObject)<br></code></pre></td></tr></table></figure><p>理解了这个，其实装饰类的装饰器也没什么难的，就是输入一个类在这个类上进行操作再返回这个类罢了。</p><p>当然这个装饰器也可以添加参数，转换成等价形式就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">MyObject = add_str(prefix)(MyObject)<br></code></pre></td></tr></table></figure><p>我们对上面的代码进行改写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_str</span>(<span class="hljs-params">prefix</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(self.__dict__)<br><br>        cls.__str__ = __str__<br>        <span class="hljs-built_in">print</span>(prefix)<br>        <span class="hljs-keyword">return</span> cls<br><br>    <span class="hljs-keyword">return</span> wrapper<br><br><br><span class="hljs-meta">@add_str(<span class="hljs-params">prefix=<span class="hljs-number">123</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyObject</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, a, b</span>):<br>        self.a = a<br>        self.b = b<br><br><br>o = MyObject(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(o)<br></code></pre></td></tr></table></figure><p>运行结果为：</p><p><img src="/%E7%B1%BB%E4%B8%8E%E8%A3%85%E9%A5%B0%E5%99%A8/5.jpg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没什么好总结的，之前在《cookbook》里没看懂的东西现在应该都看的懂了。</p>]]></content>
    
    
    <categories>
      
      <category>python高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>装饰器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python的hash机制</title>
    <link href="/2022/05/17/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/05/17/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>假设我们有如下场景：</p><p>我们在玩一个二维游戏，我们想知道一个坐标上站了多少玩家</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Position</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y</span>):<br>        self.x = x;<br>        self.y = y;<br><br><br>pos = Position(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>pos2 = Position(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(pos), <span class="hljs-built_in">id</span>(pos2))<br>d = &#123;&#125;<br>d[pos] = <span class="hljs-number">1</span><br>d[pos2] = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure><p>理所当然我们会设置如上的代码，使用一个Position类来设置坐标，使用一个字典来保存对应坐标的人数，此时我们希望<code>pos</code>和<code>pos2</code>在字典中对应的键是一样的，但是实际结果是这样吗？</p><p>运行结果：</p><p><img src="/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/1.png"></p><p>可以看到我们并没有将键值更改，而是字典中存在了两个键分别对应不同的键值，这并不是我们期望的结果，通过打印对象<code>id</code>我们可以知道两个实例对象的<code>id</code>并不相同，因此字典并不认为他们相同。针对此问题我们如何解决呢？</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>我们理所当然的会想到，我们可以重写<code>Position</code>类中的<code>__eq__</code>函数让两个对象相等，因此我们对代码做出如下修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Position</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y</span>):<br>        self.x = x;<br>        self.y = y;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.x == other.x <span class="hljs-keyword">and</span> self.y == other.y<br><br><br>pos = Position(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>pos2 = Position(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(pos==pos2)<br><br>d = &#123;&#125;<br>d[pos] = <span class="hljs-number">1</span><br>d[pos2] = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure><p><img src="/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/2.png"></p><p>可以看到此时两个对象确实相等，但是却报错了，为什么我们不加<code>__eq__</code>函数没报错，加了反而报错了呢?</p><h2 id="源码理解"><a href="#源码理解" class="headerlink" title="源码理解"></a>源码理解</h2><p><img src="/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/3.png"></p><p>这里就是我们在给一个字典设置插入数据时使用的方法，他返回一个函数我们点到<code>_PyDict_SetItem_Take2</code>里进行查看</p><p><img src="/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/4.png"></p><p>在这里可以看到如果这个<code>key</code>不是一个<code>unicode</code>的话就会进入<code>PyObject_Hash</code>里取一个哈希值，我们再进入<code>PyObject_Hash</code>进行查看</p><p><img src="/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/5.png"></p><p>这个函数并不难，如果有hash方法则返回一个hash值，如果没有则报异常我们再进入这个异常中看一下</p><p><img src="/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/6.png"></p><p>在这里我们看到了我们代码中报的错误，也就是说当一个<code>object</code>没有<code>hashfunction</code>时，如果我们想要将其作为字典中的<code>key</code>就会报<code>unhashable type:</code>，但是当我们没有设置<code>__eq__</code>时我们并不会报错，也就是说我们的对象是<code>hashable</code>的，但是我们设置了却发生了错误，这中间发生了什么？</p><p>我们再回到<code>PyObject_Hash</code>函数中</p><p><img src="/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/5.png"></p><p>这里<code>tp_hash</code>是一个函数指针，就是当他想求一个<code>hash</code>函数时，所用的到指针</p><ul><li>第一个问题：为什么我们没有在类里设置<code>hash</code>函数，它可以作为字典的<code>key</code></li><li>第二个问题：为什么我们在类里设置<code>__eq__</code>时会报错？</li></ul><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3><p>其实，我们理所当然可以想到，在我们定义一个类时会自动继承基类<code>Object</code>，这里是有一个默认的<code>hash</code>函数的，在源码中我们也可以看到</p><p><img src="/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/7.png"></p><p><img src="/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/8.png"></p><p>实际上就是使用基类的<code>hash</code>方法对这个对象的地址进行了<code>hash</code>操作，因为我们每个对象的<code>id</code>也就是地址是不同的，所以对应字典中两个<code>key</code>，那么为什么我们在定义<code>__eq__</code>后会报错呢？如下图所示</p><p><img src="/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/9.png"></p><p>这里的代码是当我们定义一个类是会继承多少基类中的方法，我们可以看到当我们<code>type-&gt;tp_richcompare == NULL &amp;&amp; type-&gt;tp_hash == NULL</code>与我们没有重写<code>hash</code>时才会继承基类的<code>richcompare</code>与<code>hash</code>，但是我们并没有重写基类的<code>hash</code>方法。我们点开<code>overrides_hash</code>函数</p><p><img src="/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/10.png"></p><p>如上图所示，现在我们就很清晰了，只要我们重写了<code>__eq__</code>就相当于我们重写了<code>hash</code>，也就是说由于我们重写了<code>__eq__</code>，导致我们没有继承基类的<code>hash</code>函数，也就导致我们无法把这个对象作为<code>dict</code>里的一个<code>key</code>。</p><h3 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h3><p>因此此时我们只需要在这个类里实现<code>hash</code>函数，我们就可以解决这一问题</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Position</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y</span>):<br>        self.x = x;<br>        self.y = y;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__hash__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span>(self.x, self.y)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.x == other.x <span class="hljs-keyword">and</span> self.y == other.y<br><br><br>pos = Position(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>pos2 = Position(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(pos == pos2)<br><br>d = &#123;&#125;<br>d[pos] = <span class="hljs-number">1</span><br>d[pos2] = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/11.png"></p><p>我们得到了我们想要的结果</p><p>这里我们已经实现了<code>hash</code>，那如果我们不要<code>__eq__</code>呢？</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Position</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y</span>):<br>        self.x = x;<br>        self.y = y;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__hash__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span>((self.x, self.y))<br><br><br><br><br>pos = Position(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>pos2 = Position(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(pos == pos2)<br><br>d = &#123;&#125;<br>d[pos] = <span class="hljs-number">1</span><br>d[pos2] = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/12.png"></p><p>这里又变成了两个<code>key</code>，其实这很好理解，两个值一样的数据它可能会有相同的<code>hash</code>值，这也就是<code>Hash collision</code>（哈希碰撞），在我们没有定义<code>__eq__</code>时它不仅比较两个对象的<code>hash</code>值同时比较两个对象的<code>id</code>，我们知道两个对象的<code>id</code>是不同的，所以<code>dict</code>并不会认为这两个对象代表同一个<code>key</code>。</p><p>说到这里，我们可能会认为如果两个对象有相同的<code>hash</code>，并且<code>eq</code>他就是一个<code>key</code>，如果仅有相同的<code>hash</code>但是并不<code>eq</code>那就是两个<code>key</code>。真的是这样吗？再看下面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Position</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, x, y</span>):<br>        self.x = x;<br>        self.y = y;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__hash__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span>((self.x, self.y))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__eq__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br>pos = Position(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>pos2 = pos<br><span class="hljs-built_in">print</span>(pos == pos2)<br><br>d = &#123;&#125;<br>d[pos] = <span class="hljs-number">1</span><br>d[pos2] = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/13.png"></p><p>这里<code>eq</code>永远返回<code>False</code>，这意味着不管两个对象是否真的<code>eq</code>我们都认为他是不相等的，同时我们将<code>pos</code>直接赋值给了<code>pos</code>，在python中一切皆引用，此时他们的<code>id</code>是相同的，我们打印它们是否相等，结果却是不相等，但是<code>dict</code>认为它们是同一个<code>key</code>。这又是为什么呢？我们再回到源码中</p><p><img src="/python%E7%9A%84hash%E6%9C%BA%E5%88%B6/14.png"></p><p>这里其实比较的是新的<code>key</code>和原来hash位置相同的<code>key</code>是否是相等的，这里是C语言中的相等，也就是这两个地址是否相同，若相同则不会比较后面的<code>hash</code>值以及<code>eq</code>，这也就解释了上述代码的结果。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>自定义类型做<code>dict</code>的<code>key</code>，必须要有<code>__hash__</code>方法，<code>dict</code>判断两个<code>key</code>是不是同一个<code>key</code>时，优先比较这两个<code>key</code>的<code>id</code>，若<code>id</code>相同则认为是一个<code>key</code>，若<code>id</code>不同则比较<code>__hash__</code>和<code>__eq__</code>，且两者同时相等才认为是同一个<code>key</code>。</p><p>学习python的时候觉得很简单，但是深入进去却发现很难也很有趣。</p>]]></content>
    
    
    <categories>
      
      <category>python高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>装饰器</title>
    <link href="/2022/05/04/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <url>/2022/05/04/%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h2 id="1-目的"><a href="#1-目的" class="headerlink" title="1. 目的"></a>1. 目的</h2><p>看如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_10w</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    计算100000以内的每个数的立方和</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    sum_ret = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100001</span>):<br>        sum_ret += i ** <span class="hljs-number">3</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;10w以内的每个数的立方和为：&quot;</span>, sum_ret)<br><br><br>start_time = time.time()<br>calculate_10w()<br>stop_time = time.time()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;耗费总时长为:&quot;</span>, stop_time - start_time, <span class="hljs-string">&quot;（秒）&quot;</span>)<br>复制Error复制成功...<br></code></pre></td></tr></table></figure><p>运行效果如下：</p><p><img src="/%E8%A3%85%E9%A5%B0%E5%99%A8/1.png"></p><p>问题：</p><blockquote><p>如果现在需要对5个函数都要进行耗时统计，请问怎样实现？难道将上图中的15、17、19行 写5遍吗？</p></blockquote><p>为了解决类似的问题，我们需要学习一个新的知识：装饰器</p><p>提醒：</p><blockquote><p>装饰器很重要，一定要学会</p><p>装饰器是程序开发中经常会用到的一个功能，用好了装饰器，开发效率如虎添翼，所以这也是Python面试中必问的问题，但对于好多初次接触这个知识的人来讲，这个功能有点绕，自学时直接绕过去了，然后面试问到了就挂了，因为装饰器是程序开发的基础知识，这个都不会，别跟人家说你会Python, 看了下面的文章，保证你学会装饰器。</p></blockquote><h2 id="2-知识准备"><a href="#2-知识准备" class="headerlink" title="2. 知识准备"></a>2. 知识准备</h2><h3 id="2-1-引用"><a href="#2-1-引用" class="headerlink" title="2.1 引用"></a>2.1 引用</h3><p>测试代码1（定义函数、调用函数、函数名是函数引用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#### 第一波 ####</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)<br> <br>foo  <span class="hljs-comment"># 表示是函数</span><br>foo()  <span class="hljs-comment"># 表示调用foo函数</span><br>复制Error复制成功...<br></code></pre></td></tr></table></figure><p>测试代码2（多个函数用同一个函数名，会导致前面的定义的代码块不能被调用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#### 第二波 ####</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)<br> <br>foo = <span class="hljs-keyword">lambda</span> x: x + <span class="hljs-number">1</span><br> <br>foo()  <span class="hljs-comment"># 执行lambda表达式，而不再是原来的foo函数，因为foo这个名字被重新指向了另外一个匿名函数复制Error复制成功...</span><br></code></pre></td></tr></table></figure><p>函数名仅仅是个变量，只不过指向了定义的函数而已，所以才能通过 <code>函数名()</code>调用，如果 <code>函数名=xxx</code>被修改了，那么当在执行<code>函数名()</code>时，调用的就不是之前的那个函数了</p><h3 id="2-2-闭包"><a href="#2-2-闭包" class="headerlink" title="2.2 闭包"></a>2.2 闭包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_pencil</span>(<span class="hljs-params">color</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">content</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在使用(%s)色，写：%s&quot;</span> % (color, content))<br><br>    <span class="hljs-keyword">return</span> write<br><br><br>black_pencil = make_pencil(<span class="hljs-string">&quot;黑&quot;</span>)<br>black_pencil(<span class="hljs-string">&quot;我是喝墨水长大的&quot;</span>)<br><br>red_pencil = make_pencil(<span class="hljs-string">&quot;红&quot;</span>)<br>red_pencil(<span class="hljs-string">&quot;这么巧，我也是，只不过是红墨水&quot;</span>)<br>复制Error复制成功...<br></code></pre></td></tr></table></figure><p><img src="/%E8%A3%85%E9%A5%B0%E5%99%A8/2.png"></p><p>小复习：</p><blockquote><p>闭包用到的核心其实就是：在一个函数中返回另外一个函数的引用，只不过这个被返回的函数中用到了其他函数中的变量而已。说到底就是 只要用一个变量指向某个函数代码块，就可以调用它</p></blockquote><h2 id="3-引入装饰器"><a href="#3-引入装饰器" class="headerlink" title="3. 引入装饰器"></a>3. 引入装饰器</h2><h3 id="3-1-问题"><a href="#3-1-问题" class="headerlink" title="3.1 问题"></a>3.1 问题</h3><p>初创公司有N个业务部门，基础平台部门负责提供底层的功能，如：</p><ul><li>数据库操作</li><li>Redis调用</li><li>监控API等功能</li></ul><p>其他业务部门使用基础功能时，只需调用基础平台提供的功能即可，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">############### 基础平台提供的功能如下 ###############</span><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f1&#x27;</span>)<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f2&#x27;</span>)<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f3</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f3&#x27;</span>)<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f4</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f4&#x27;</span>)<br> <br><span class="hljs-comment">############### 业务部门A 调用基础平台提供的功能 ###############</span><br>f1()<br>f2()<br>f3()<br>f4()<br> <br><span class="hljs-comment">############### 业务部门B 调用基础平台提供的功能 ###############</span><br>f1()<br>f2()<br>f3()<br>f4()复制Error复制成功...<br></code></pre></td></tr></table></figure><p>目前公司有条不紊的进行着，但是以前基础平台的开发人员在写代码时候没有关注<code>验证权限</code>相关的问题，</p><p>即：基础平台的提供的功能现在是可以被任何人使用。这种做法肯定是不妥的，因为这样会容易泄露功能代码</p><p>现在需要对基础平台的所有功能进行重构，为平台提供的所有功能添加验证机制，</p><p>即：执行功能前，先进行验证</p><p>想想，如果是你接手这个任务，你会怎么做呢？</p><h3 id="3-2-尝试解决问题"><a href="#3-2-尝试解决问题" class="headerlink" title="3.2 尝试解决问题"></a>3.2 尝试解决问题</h3><h4 id="3-2-1-老大把工作交给-Low-B"><a href="#3-2-1-老大把工作交给-Low-B" class="headerlink" title="3.2.1 老大把工作交给 Low B"></a>3.2.1 老大把工作交给 Low B</h4><p>他是这么做的：</p><blockquote><p>跟每个业务部门交涉，每个业务部门自己写代码，调用基础平台的功能之前先验证。哎！这样一来基础平台就不需要做任何修改了。太棒了，有充足的时间泡妹子…</p></blockquote><p>当天Low B 被开除了…</p><h4 id="3-2-2-老大把工作交给-Low-BB"><a href="#3-2-2-老大把工作交给-Low-BB" class="headerlink" title="3.2.2 老大把工作交给 Low BB"></a>3.2.2 老大把工作交给 Low BB</h4><p>他是这么做的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">############### 基础平台提供的功能如下 ############### </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>    <span class="hljs-comment"># 验证1</span><br>    <span class="hljs-comment"># 验证2</span><br>    <span class="hljs-comment"># 验证3</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f1&#x27;</span>)<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>():<br>    <span class="hljs-comment"># 验证1</span><br>    <span class="hljs-comment"># 验证2</span><br>    <span class="hljs-comment"># 验证3</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f2&#x27;</span>)<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f3</span>():<br>    <span class="hljs-comment"># 验证1</span><br>    <span class="hljs-comment"># 验证2</span><br>    <span class="hljs-comment"># 验证3</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f3&#x27;</span>)<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f4</span>():<br>    <span class="hljs-comment"># 验证1</span><br>    <span class="hljs-comment"># 验证2</span><br>    <span class="hljs-comment"># 验证3</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f4&#x27;</span>)<br> <br><span class="hljs-comment">### 业务部门A 调用基础平台提供的功能### </span><br>f1()<br>f2()<br>f3()<br>f4()<br> <br><span class="hljs-comment">### 业务部门B 调用基础平台提供的功能 ### </span><br> <br>f1()<br>f2()<br>f3()<br>f4()复制Error复制成功...<br></code></pre></td></tr></table></figure><p>过了一周 Low BB 被开除了…</p><h4 id="3-2-3-老大把工作交给-Low-BBB"><a href="#3-2-3-老大把工作交给-Low-BBB" class="headerlink" title="3.2.3 老大把工作交给 Low BBB"></a>3.2.3 老大把工作交给 Low BBB</h4><p>他是这么做的：</p><blockquote><p>只对基础平台的代码进行重构，其他业务部门无需做任何修改</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">############### 基础平台提供的功能如下 ############### </span><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">check_login</span>():<br>    <span class="hljs-comment"># 验证1</span><br>    <span class="hljs-comment"># 验证2</span><br>    <span class="hljs-comment"># 验证3</span><br>    <span class="hljs-keyword">pass</span><br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>    check_login()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f1&#x27;</span>)<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>():<br>    check_login()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f2&#x27;</span>)<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f3</span>():<br>    check_login()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f3&#x27;</span>)<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f4</span>():<br>    check_login()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f4&#x27;</span>)复制Error复制成功...<br></code></pre></td></tr></table></figure><p>老大看了下Low BBB 的实现，嘴角漏出了一丝的欣慰的笑，语重心长的跟Low BBB聊了个天：</p><h5 id="老大说："><a href="#老大说：" class="headerlink" title="老大说："></a>老大说：</h5><p>写代码要遵循<code>开放封闭</code>原则，虽然在这个原则是用的面向对象开发，但是也适用于函数式编程，简单来说，它规定已经实现的功能代码不允许被修改，但可以被扩展，即：</p><ul><li>封闭：已实现的功能代码块</li><li>开放：对扩展开发</li></ul><p>如果将开放封闭原则应用在上述需求中，那么就不允许在函数<code>f1</code>、<code>f2</code>、<code>f3</code>、<code>f4</code>的内部进行修改代码，老板就给了Low BBB一个实现方案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_login</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-comment"># 验证1</span><br>        <span class="hljs-comment"># 验证2</span><br>        <span class="hljs-comment"># 验证3</span><br>        func()<br>    <span class="hljs-keyword">return</span> inner<br> <br><span class="hljs-comment"># 在f1、f2、f3、f4函数定义之前多写一句话</span><br><span class="hljs-meta">@check_login</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f1&#x27;</span>)<br><span class="hljs-meta">@check_login</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f2</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f2&#x27;</span>)<br><span class="hljs-meta">@check_login</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f3</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f3&#x27;</span>)<br><span class="hljs-meta">@check_login</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f4</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f4&#x27;</span>)复制Error复制成功...<br></code></pre></td></tr></table></figure><p>对于上述代码，也是仅仅对基础平台的代码进行修改，就可以实现在其他人调用函数<code>f1</code>、 <code>f2</code>、<code>f3</code>、<code>f4</code> 之前都进行权限验证操作，并且其他业务部门无需做任何操作。</p><p>Low BBB心惊胆战的问了下，这段代码的内部执行原理是什么呢？</p><p>老大正要生气，突然Low BBB的手机掉到地上，恰巧屏保就是Low BBB的女友照片，老大一看，喜笑颜开，决定和Low BBB交个好朋友，将他所知道的全部告诉他。</p><h2 id="4-装饰器"><a href="#4-装饰器" class="headerlink" title="4. 装饰器"></a>4. 装饰器</h2><p>单独以函数<code>f1</code>为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_login</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-comment"># 验证1</span><br>        <span class="hljs-comment"># 验证2</span><br>        <span class="hljs-comment"># 验证3</span><br>        func()<br>    <span class="hljs-keyword">return</span> inner<br> <br><span class="hljs-meta">@check_login</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f1&#x27;</span>)复制Error复制成功...<br></code></pre></td></tr></table></figure><p>当Python解释器对上述代码运行时，会从上到下解释代码，步骤如下：</p><ol><li>遇到<code>def check_login(func): </code> 将<code>check_login</code>函数加载到内存</li><li>执行<code>@check_login</code></li></ol><p>没错， 从表面上看解释器仅仅会解释这两句代码，因为函数在 没有被调用之前其内部代码不会被执行。</p><p>从表面上看解释器着实会执行这两句，但是<code>@check_login</code>这一句代码里却有大文章， <code>@xxx</code> 是Python的一种语法糖（简单理解为令你很惊奇的功能）</p><h3 id="4-1-xxx实现过程"><a href="#4-1-xxx实现过程" class="headerlink" title="4.1 @xxx实现过程"></a>4.1 <code>@xxx</code>实现过程</h3><p>上例中<code>@check_login</code>内部会执行以下操作：</p><h4 id="步骤1：执行check-login函数"><a href="#步骤1：执行check-login函数" class="headerlink" title="[步骤1：执行check_login函数"></a>[步骤1：执行check_login函数</h4><p>执行check_login函数 ，并将 @check_login 下面的函数作为check_login函数的参数</p><p>即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@check_login</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():复制Error复制成功...<br></code></pre></td></tr></table></figure><p>等价于如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">check_login(f1)复制Error复制成功...<br></code></pre></td></tr></table></figure><p>所以，内部就会去执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>(): <br>    <span class="hljs-comment">#验证 1</span><br>    <span class="hljs-comment">#验证 2</span><br>    <span class="hljs-comment">#验证 3</span><br>    f1()    <span class="hljs-comment"># func是参数，此时 func 等于 f1 </span><br><span class="hljs-keyword">return</span> inner  <span class="hljs-comment"># 返回的 inner，inner代表的是函数，非执行函数 ,其实就是将原来的 f1 函数塞进另外一个函数中复制Error复制成功...</span><br></code></pre></td></tr></table></figure><h4 id="步骤2：f1-x3D-check-login的返回值"><a href="#步骤2：f1-x3D-check-login的返回值" class="headerlink" title="步骤2：f1 &#x3D; check_login的返回值"></a>步骤2：f1 &#x3D; check_login的返回值</h4><p>将执行完的<code>check_login</code> 函数返回值 赋值 给<code>@check_login </code>下面的函数的函数名<code>f1</code> 即将<code>check_login </code>的返回值再重新赋值给 <code>f1</code>，即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">新f1 = inner复制Error复制成功...<br></code></pre></td></tr></table></figure><p>所以，以后业务部门想要执行<code>f1</code>函数时，就会执行<code>新f1</code>函数，在<code>新f1</code>函数内部先执行验证，再执行原来的<code>f1</code>函数，然后将原来<code>f1</code> 函数的返回值返回给了业务调用者</p><p>如此一来， 即执行了验证的功能，又执行了原来<code>f1</code>函数的内容，并将原<code>f1</code>函数返回值 返回给业务调用着</p><h3 id="4-2-测试"><a href="#4-2-测试" class="headerlink" title="4.2 测试"></a>4.2 测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_login</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-comment"># 验证1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;admin&quot;</span> != <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入用户名:&quot;</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户名不正确&quot;</span><br>        <span class="hljs-comment"># 验证2</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;123456&quot;</span> != <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密码:&quot;</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;密码不正确&quot;</span><br>        <span class="hljs-comment"># 验证3</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;7788&quot;</span> != <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入手机短信验证码:&quot;</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;验证码不正确&quot;</span><br><br>        func()<br><br>    <span class="hljs-keyword">return</span> inner<br><br><br><span class="hljs-meta">@check_login</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f1&#x27;</span>)<br><br><br>f1()  <span class="hljs-comment"># 调用f1函数</span><br>复制Error复制成功...<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E8%A3%85%E9%A5%B0%E5%99%A8/3.png"></p><h3 id="4-3-研究实现-的功能"><a href="#4-3-研究实现-的功能" class="headerlink" title="4.3 研究实现@的功能"></a>4.3 研究实现<code>@</code>的功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_login</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-comment"># 验证1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;admin&quot;</span> != <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入用户名:&quot;</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户名不正确&quot;</span><br>        <span class="hljs-comment"># 验证2</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;123456&quot;</span> != <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密码:&quot;</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;密码不正确&quot;</span><br>        <span class="hljs-comment"># 验证3</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;7788&quot;</span> != <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入手机短信验证码:&quot;</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;验证码不正确&quot;</span><br><br>        func()<br><br>    <span class="hljs-keyword">return</span> inner<br><br><br><span class="hljs-comment"># @check_login</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;f1&#x27;</span>)<br><br><span class="hljs-comment"># 下一行代码完成了第18行@check_login的作用</span><br>f1 = check_login(f1)<br><br>f1()  <span class="hljs-comment"># 调用f1函数复制Error复制成功...</span><br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E8%A3%85%E9%A5%B0%E5%99%A8/4.png"></p><p>Low BBB 你明白了吗？要是没明白的话，我晚上去你家帮你实现吧！！！</p><h3 id="4-4-使用-对函数装饰的时间"><a href="#4-4-使用-对函数装饰的时间" class="headerlink" title="4.4 使用@对函数装饰的时间"></a>4.4 使用<code>@</code>对函数装饰的时间</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">timefun</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----开始装饰----&quot;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapped_func</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----开始调用原函数----&quot;</span>)<br>        func()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----结束调用原函数----&quot;</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----完成装饰----&quot;</span>)<br>    <span class="hljs-keyword">return</span> wrapped_func<br><br><br><span class="hljs-meta">@timefun</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">helloworld</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;helloworld&quot;</span>)<br><br><br>helloworld()  <span class="hljs-comment"># 注意此时并没有调用函数helloworld，如果运行结果中出现了一些信息，则说明@timefun开始装饰</span><br>              <span class="hljs-comment"># 的时间是Python解释器在遇到那句代码时进行，而不是因为调用被装饰的函数 才开始装饰</span><br>复制Error复制成功...<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E8%A3%85%E9%A5%B0%E5%99%A8/5.png"></p><h3 id="4-5-思考"><a href="#4-5-思考" class="headerlink" title="4.5 思考"></a>4.5 思考</h3><p>其实实现装饰器用到了闭包，只是将闭包中外部函数的返回值 给了 被装饰函数名字，从而修改了函数指向而已</p><p>那么，有个问题需要想想：在使用普通闭包 与 将闭包用作实现装饰器 时，有什么不同吗？</p><p>闭包例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">who</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do</span>(<span class="hljs-params">content</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;(%s):%s&quot;</span> % (name, content))<br><br>    <span class="hljs-keyword">return</span> do<br><br><br>zhangsan = who(<span class="hljs-string">&quot;张三&quot;</span>)<br>lisi = who(<span class="hljs-string">&quot;李四&quot;</span>)<br><br>zhangsan(<span class="hljs-string">&quot;你努力了吗？&quot;</span>)<br>lisi(<span class="hljs-string">&quot;为啥努力！&quot;</span>)<br>zhangsan(<span class="hljs-string">&quot;你确定不要努力吗？&quot;</span>)<br>lisi(<span class="hljs-string">&quot;嗯，确定？&quot;</span>)<br>zhangsan(<span class="hljs-string">&quot;那可就不要要怪别人努力了啊&quot;</span>)<br>lisi(<span class="hljs-string">&quot;别人与我何关!&quot;</span>)<br>zhangsan(<span class="hljs-string">&quot;隔壁那户人家姓xxxx&quot;</span>)<br>lisi(<span class="hljs-string">&quot;( ⊙ o ⊙ )啊！&quot;</span>)<br>复制Error复制成功...<br></code></pre></td></tr></table></figure><p>装饰器例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">call</span>():<br>        ret = func()<br>        <span class="hljs-keyword">if</span> ret <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(ret , <span class="hljs-built_in">str</span>):<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;log.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(ret)<br><br>        <span class="hljs-keyword">return</span> ret<br><br>    <span class="hljs-keyword">return</span> call<br><br><br><span class="hljs-meta">@log</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_hello</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span><br><br><br><span class="hljs-built_in">print</span>(print_hello())<br>复制Error复制成功...<br></code></pre></td></tr></table></figure><p><img src="/%E8%A3%85%E9%A5%B0%E5%99%A8/6.png"></p><p>小总结：</p><ul><li>普通闭包：内部函数将使用的外部变量当做数据来用</li><li>将闭包当做装饰器：内部函数将使用的外部变量当做可调用的对象(例如函数)来调用</li><li>装饰器(decorator)功能<ul><li>引入日志</li><li>函数执行时间统计</li><li>执行函数前预备处理</li><li>执行函数后清理功能</li><li>权限校验等场景</li><li>缓存</li></ul></li></ul><h2 id="5-深入装饰器"><a href="#5-深入装饰器" class="headerlink" title="5. 深入装饰器"></a>5. 深入装饰器</h2><h3 id="5-1-对无参数的函数进行装饰"><a href="#5-1-对无参数的函数进行装饰" class="headerlink" title="5.1 对无参数的函数进行装饰"></a>5.1 对无参数的函数进行装饰</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> ctime, sleep<br><br><span class="hljs-comment"># 定义一个闭包</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timefun</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapped_func</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s called at %s&quot;</span> % (func.__name__, ctime()))<br>        func()<br>    <span class="hljs-keyword">return</span> wrapped_func<br><br><br><span class="hljs-meta">@timefun  </span><span class="hljs-comment"># 使用装饰器对foo进行装饰，此时相当于foo = timefun(foo)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am foo&quot;</span>)<br><br>foo()  <span class="hljs-comment"># 相当于调用的是wrapped_func函数</span><br>sleep(<span class="hljs-number">2</span>)<br>foo()  <span class="hljs-comment"># 相当于调用的是wrapped_func函数</span><br>复制Error复制成功...<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E8%A3%85%E9%A5%B0%E5%99%A8/13.png"></p><p>上面代码理解装饰器执行行为可理解成</p><ol><li>&#96;&#96;&#96;<br>foo &#x3D; timefun(foo)<figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><br>   <span class="hljs-number">1.</span> foo先作为参数赋值给<span class="hljs-keyword">func</span>后，<span class="hljs-title function_">foo</span>接收指向<span class="hljs-title function_">timefun</span>返回的<span class="hljs-title function_">wrapped_func</span><br><br><span class="hljs-number">2.</span> 执行<br><br></code></pre></td></tr></table></figure>foo()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>   <span class="hljs-number">1.</span> 调用foo()即等价调用wrapped_func()<br>   <span class="hljs-number">2.</span> 内部函数wrapped_func被引用，所以外部函数的func变量(自由变量)并没有释放<br>   <span class="hljs-number">3.</span> func里保存的是原foo函数对象<br><br>![](装饰器/<span class="hljs-number">14.</span>png)<br><br><span class="hljs-comment">### 5.2 对有参数的函数进行装饰</span><br><br>```python<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> ctime, sleep<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timefun</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapped_func</span>(<span class="hljs-params">a, b</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s called at %s&quot;</span> % (func.__name__, ctime()))<br>        <span class="hljs-built_in">print</span>(a, b)<br>        func(a, b)<br>    <span class="hljs-keyword">return</span> wrapped_func<br><br><span class="hljs-meta">@timefun</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-built_in">print</span>(a+b)<br><br>foo(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>)<br>sleep(<span class="hljs-number">2</span>)<br>foo(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)复制Error复制成功...<br></code></pre></td></tr></table></figure></li></ol><p><img src="/%E8%A3%85%E9%A5%B0%E5%99%A8/15.png"></p><h3 id="5-3-对带有不定长参数的函数进行装饰"><a href="#5-3-对带有不定长参数的函数进行装饰" class="headerlink" title="5.3 对带有不定长参数的函数进行装饰"></a>5.3 对带有不定长参数的函数进行装饰</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> ctime, sleep<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timefun</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapped_func</span>(<span class="hljs-params">*args, **kwargs</span>):<br>        <span class="hljs-comment"># args=(3,5,7)</span><br>        <span class="hljs-comment"># kwargs = &#123;&#125;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s called at %s&quot;</span>%(func.__name__, ctime()))<br>        func(*args, **kwargs)  <span class="hljs-comment"># 对args,kwargs进行拆包，此时相当于func(3,5,7)</span><br>    <span class="hljs-keyword">return</span> wrapped_func<br><br><br><span class="hljs-meta">@timefun</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">a, b, c</span>):<br>    <span class="hljs-comment"># a=3,b=5,c=7</span><br>    <span class="hljs-built_in">print</span>(a+b+c)  <span class="hljs-comment"># 15</span><br><br>foo(<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>)  <span class="hljs-comment"># 将3，5，7这些未命名参数传递到第5行函数中，此时args用元组存储</span><br>复制Error复制成功...<br></code></pre></td></tr></table></figure><p><img src="/%E8%A3%85%E9%A5%B0%E5%99%A8/7.png"></p><h3 id="5-4-对带有return的函数进行装饰"><a href="#5-4-对带有return的函数进行装饰" class="headerlink" title="5.4 对带有return的函数进行装饰"></a>5.4 对带有<code>return</code>的函数进行装饰</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> ctime, sleep<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timefun</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapped_func</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s called at %s&quot;</span> % (func.__name__, ctime()))<br>        func()<br>    <span class="hljs-keyword">return</span> wrapped_func<br><br><br><span class="hljs-meta">@timefun</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am foo&quot;</span>)<br><br><br><span class="hljs-meta">@timefun</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_info</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;----hahah---&#x27;</span><br><br>foo()<br>sleep(<span class="hljs-number">2</span>)<br>foo()<br><br><span class="hljs-built_in">print</span>(get_info())  <span class="hljs-comment"># 可以看到这里并没有 get_info这个函数 返回的数据，因此这里有不完善的地方</span><br>复制Error复制成功...<br></code></pre></td></tr></table></figure><p>执行结果:</p><p><img src="/%E8%A3%85%E9%A5%B0%E5%99%A8/8.png"></p><p>如果修改装饰器为<code>return func()</code>，完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> ctime, sleep<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">timefun</span>(<span class="hljs-params">func</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapped_func</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s called at %s&quot;</span> % (func.__name__, ctime()))<br>        <span class="hljs-comment"># 这里应该加上return ，及时func指向的函数没有返回值，那么默认也是None，</span><br>        <span class="hljs-comment"># 此时无非是return None而已，也是可以的</span><br>        <span class="hljs-keyword">return</span> func()<br>    <span class="hljs-keyword">return</span> wrapped_func<br><br><br><span class="hljs-meta">@timefun</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">foo</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am foo&quot;</span>)<br><br><br><span class="hljs-meta">@timefun</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_info</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;----hahah---&#x27;</span><br><br>foo()<br>sleep(<span class="hljs-number">2</span>)<br>foo()<br><br><span class="hljs-built_in">print</span>(get_info())<br>复制Error复制成功...<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E8%A3%85%E9%A5%B0%E5%99%A8/16.png"></p><p>小总结：</p><p>一般情况下为了让装饰器更通用，可以有<code>return</code>，即使这个被装饰的函数默认没有返回值也不会有问题，因为此时相当于<code>return None</code></p><h3 id="5-5-多个装饰器对同一个函数装饰"><a href="#5-5-多个装饰器对同一个函数装饰" class="headerlink" title="5.5 多个装饰器对同一个函数装饰"></a>5.5 多个装饰器对同一个函数装饰</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义函数：完成包裹数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">makeBold</span>(<span class="hljs-params">fn</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapped</span>():<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;b&gt;&quot;</span> + fn() + <span class="hljs-string">&quot;&lt;/b&gt;&quot;</span><br>    <span class="hljs-keyword">return</span> wrapped<br><br><span class="hljs-comment"># 定义函数：完成包裹数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">makeItalic</span>(<span class="hljs-params">fn</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapped</span>():<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;i&gt;&quot;</span> + fn() + <span class="hljs-string">&quot;&lt;/i&gt;&quot;</span><br>    <span class="hljs-keyword">return</span> wrapped<br><br><span class="hljs-meta">@makeBold</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test1</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world-1&quot;</span><br><br><span class="hljs-meta">@makeItalic</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test2</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world-2&quot;</span><br><br><span class="hljs-meta">@makeBold</span><br><span class="hljs-meta">@makeItalic</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test3</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world-3&quot;</span><br><br><span class="hljs-built_in">print</span>(test1())<br><span class="hljs-built_in">print</span>(test2())<br><span class="hljs-built_in">print</span>(test3())复制Error复制成功...<br></code></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>hello world-1<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>hello world-2<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>hello world-3<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>复制Error复制成功...<br></code></pre></td></tr></table></figure><p><img src="/%E8%A3%85%E9%A5%B0%E5%99%A8/10.png"></p><h3 id="5-6-装饰器带参数"><a href="#5-6-装饰器带参数" class="headerlink" title="5.6 装饰器带参数"></a>5.6 装饰器带参数</h3><p>在原有装饰器的基础上，设置外部变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">call_out2</span>(<span class="hljs-params">timeout=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">call_out1</span>(<span class="hljs-params">func</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">call</span>():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----1----&quot;</span>)<br>            time.sleep(timeout)<br>            ret = func()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----2----&quot;</span>)<br>            <span class="hljs-keyword">return</span> ret<br>        <span class="hljs-keyword">return</span> call<br>    <span class="hljs-keyword">return</span> call_out1<br><br><br><span class="hljs-comment"># 下面的装饰过程</span><br><span class="hljs-comment"># 1. 调用timefun_arg(&quot;itcast&quot;) 得到一个返回值，即time_fun</span><br><span class="hljs-comment"># 3. 然后执行time_fun(foo) 得到一个返回值，即wrapped_func</span><br><span class="hljs-comment"># 4. 让foo = wrapped_fun，即foo现在指向wrapped_func</span><br><span class="hljs-meta">@call_out2(<span class="hljs-params"><span class="hljs-number">2</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_hello</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span><br><br><br><span class="hljs-built_in">print</span>(print_hello())<br>复制Error复制成功...<br></code></pre></td></tr></table></figure><p>可以理解为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markup"># 1. 修改print_hello的指向<br>print_hello = call_out2(2)(print_hello)<br># 2. 调用print_hello指向的新的函数<br>print_hello()复制Error复制成功...<br></code></pre></td></tr></table></figure><p><img src="/%E8%A3%85%E9%A5%B0%E5%99%A8/11.png"></p><h3 id="5-7-用类当做装饰器"><a href="#5-7-用类当做装饰器" class="headerlink" title="5.7 用类当做装饰器"></a>5.7 用类当做装饰器</h3><p>装饰器函数其实是这样一个接口约束，它必须接受一个callable对象作为参数，然后返回一个callable对象。在Python中一般callable对象都是函数，但也有例外。只要某个对象重写了 <code>__call__()</code> 方法，那么这个对象就是callable的。</p><h3 id="5-7-1-直接调用实例对象"><a href="#5-7-1-直接调用实例对象" class="headerlink" title="5.7.1 直接调用实例对象"></a>5.7.1 直接调用实例对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;call me!&#x27;</span>)<br><br>t = Test()<br>t()  <span class="hljs-comment"># 因为创建t的类Test中实现了__call__方法，那么也就意味着可以直接调用这个实例对象复制Error复制成功...</span><br></code></pre></td></tr></table></figure><h3 id="5-7-2-使用类对函数进行装饰"><a href="#5-7-2-使用类对函数进行装饰" class="headerlink" title="5.7.2 使用类对函数进行装饰"></a>5.7.2 使用类对函数进行装饰</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, func</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---初始化---&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;func name is %s&quot;</span> % func.__name__)<br>        self.__func = func<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---装饰器中的功能---&quot;</span>)<br>        self.__func()<br><br><br><span class="hljs-comment">#说明：</span><br><span class="hljs-comment">#1. 当用Test来装作装饰器对test函数进行装饰的时候，首先会创建Test的实例对象</span><br><span class="hljs-comment">#   并且会把test这个函数名当做参数传递到__init__方法中</span><br><span class="hljs-comment">#   即在__init__方法中的属性__func指向了test指向的函数</span><br><span class="hljs-comment">#2. test指向了用Test创建出来的实例对象</span><br><span class="hljs-comment">#3. 当在使用test()进行调用时，就相当于直接调用实例对象，因此会调用这个对象的__call__方法</span><br><span class="hljs-comment">#4. 为了能够在__call__方法中调用原来test指向的函数体，所以在__init__方法中就需要一个实例属性来保存这个函数体的引用</span><br><span class="hljs-comment">#   所以才有了self.__func = func这句代码，从而在调用__call__方法中能够调用到test之前的函数体</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----test---&quot;</span>)<br><br><br>test()  <span class="hljs-comment"># 如果把这句话注释，重新运行程序，依然会看到&quot;--初始化--&quot;</span><br>复制Error复制成功...<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/%E8%A3%85%E9%A5%B0%E5%99%A8/12.png"></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><ol><li>装饰器：能够快速将函数的指向修改，能够在不修改代码的前提下，给函数添加功能的方式</li><li>装饰器功能：给函数添加功能</li><li>特点：不修改原函数代码，还能添加功能；只能在原函数运行之前或者之后添加，不能在原函数运行一半时添加</li><li>实现过程：1. 将原函数的引用当做实参传递到闭包中 2. 修改原函数的指向为闭包中的内部函数</li><li>装饰器实际上用到了闭包，只不过在给外层函数传递参数时，传递的是需要被装饰的函数引用而已</li><li>装饰器还用到了引用，即在Python中，<code>a=xx</code>那么无论<code>xx</code>是列表、字典还是对象，一定是<code>a</code>指向它，而不是存储它</li></ol>]]></content>
    
    
    <categories>
      
      <category>python高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>装饰器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闭包</title>
    <link href="/2022/05/03/%E9%97%AD%E5%8C%85/"/>
    <url>/2022/05/03/%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h2 id="1-闭包"><a href="#1-闭包" class="headerlink" title="1. 闭包"></a>1. 闭包</h2><h3 id="1-1-引用"><a href="#1-1-引用" class="headerlink" title="1.1 引用"></a>1.1 引用</h3><p>在python中一切皆引用，一切皆对象，其实一个函数也可以被引用</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--- in test func----&quot;</span>)<br><br><br>test()  <span class="hljs-comment"># 这是调用函数</span><br><br>ret = test  <span class="hljs-comment"># 用另外一个变量 复制了 test这个引用，导致ret变量也指向那个 函数代码块</span><br><br><span class="hljs-comment"># 下面输出的2个地址信息是相同的</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(ret))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(test))<br><br><span class="hljs-comment"># 通过引用调用函数</span><br>ret()<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/%E9%97%AD%E5%8C%85/1.png"></p><p>我们以可以看到，一个函数也是可以被引用的</p><h3 id="1-2-什么是闭包"><a href="#1-2-什么是闭包" class="headerlink" title="1.2 什么是闭包"></a>1.2 什么是闭包</h3><p>这是维基百科的定义</p><blockquote><p>在一些语言中，在函数中可以（嵌套）定义另一个函数时，如果内部的函数引用了外部的函数的变量，则可能产生闭包。闭包可以用来在一个函数与一组“私有”变量之间创建关联关系。在给定函数被多次调用的过程中，这些私有变量能够保持其持久性。 —— 维基百科<code>https://zh.wikipedia.org/wiki/闭包_(计算机科学)</code></p></blockquote><p>用比较直观的话来描述就是函数嵌套函数，外部函数的返回值是内部函数</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_printer</span>(<span class="hljs-params">msg</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">printer</span>():<br>        <span class="hljs-built_in">print</span>(msg)<br>    <span class="hljs-keyword">return</span> printer<br><br>printer = make_printer(<span class="hljs-string">&#x27;今天是个好日子&#x27;</span>)<br>printer()<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E9%97%AD%E5%8C%85/2.png"></p><p>注意：</p><p>上面的代码<code>return</code>的是方法名，并不带<code>()</code>因为我们要拿到的是内部方法的引用，上面的代码中，<code>printer</code>拿到了<code>make_printer</code>的返回值也就是内部方法<code>printer</code>的引用，这时我们就可以调用内部方法。</p><h2 id="2-闭包案例"><a href="#2-闭包案例" class="headerlink" title="2. 闭包案例"></a>2. 闭包案例</h2><h3 id="2-1-案例一（简单的数值计算）"><a href="#2-1-案例一（简单的数值计算）" class="headerlink" title="2.1 案例一（简单的数值计算）"></a>2.1 案例一（简单的数值计算）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">number</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_in</span>(<span class="hljs-params">number_in</span>):<br>        <span class="hljs-keyword">return</span> number+number_in<br>    <span class="hljs-keyword">return</span> test_in<br><br>ret = test(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(ret(<span class="hljs-number">100</span>))<br></code></pre></td></tr></table></figure><p>运行结果</p><p><img src="/%E9%97%AD%E5%8C%85/3.png"></p><h3 id="2-2-案例二-（计算坐标）"><a href="#2-2-案例二-（计算坐标）" class="headerlink" title="2.2 案例二 （计算坐标）"></a>2.2 案例二 （计算坐标）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">line_conf</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">line</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-keyword">return</span> a*x + b<br>    <span class="hljs-keyword">return</span> line<br><br>line1 = line_conf(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>line2 = line_conf(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(line1(<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(line2(<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><p>运行结果</p><p><img src="/%E9%97%AD%E5%8C%85/4.png"></p><p>这个例子中，函数<code>line</code>与变量<code>a</code>,<code>b</code>构成闭包。</p><p>在创建闭包的时候，我们通过<code>line_conf</code>的参数<code>a</code>,<code>b</code>设置了这两个变量的取值，这样就确定了函数的最终形式(<code>y = x + 1</code>和<code>y = 4x + 5</code>)。</p><p>如果需要修改这条线的信息，只需要变换参数<code>a</code>,<code>b</code>，就可以获得不同的直线表达函数。</p><p>由此，我们可以看到，闭包也具有提高代码可复用性的作用</p><p>如果没有闭包，我们需要每次创建直线函数的时候同时说明<code>a</code>,<code>b</code>,<code>x</code>。这样，我们就需要更多的参数传递，也减少了代码的可移植性</p><h2 id="3-注意点"><a href="#3-注意点" class="headerlink" title="3.注意点"></a>3.注意点</h2><h3 id="3-1-使用闭包应注意的问题"><a href="#3-1-使用闭包应注意的问题" class="headerlink" title="3.1 使用闭包应注意的问题"></a>3.1 使用闭包应注意的问题</h3><p>由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。因此可以手动解除对匿名函数的引用，以便释放内存。</p><h3 id="3-2-修改外部函数中的变量"><a href="#3-2-修改外部函数中的变量" class="headerlink" title="3.2 修改外部函数中的变量"></a>3.2 修改外部函数中的变量</h3><p>可以使用nonlocal获取外部变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">counter</span>(<span class="hljs-params">start=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_one</span>():<br>        <span class="hljs-keyword">nonlocal</span> start<br>        start += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> start<br>    <span class="hljs-keyword">return</span> add_one<br><br>c1 = counter(<span class="hljs-number">5</span>)  <span class="hljs-comment"># 创建一个闭包</span><br><span class="hljs-built_in">print</span>(c1())<br><span class="hljs-built_in">print</span>(c1())<br><br>c2 = counter(<span class="hljs-number">50</span>)  <span class="hljs-comment"># 创建另外一个闭包</span><br><span class="hljs-built_in">print</span>(c2())<br><span class="hljs-built_in">print</span>(c2())<br><br><span class="hljs-built_in">print</span>(c1())<br><span class="hljs-built_in">print</span>(c1())<br><br><span class="hljs-built_in">print</span>(c2())<br><span class="hljs-built_in">print</span>(c2())<br><br></code></pre></td></tr></table></figure><p>运行结果</p><p><img src="/%E9%97%AD%E5%8C%85/5.png"></p><h3 id="3-3-多个闭包"><a href="#3-3-多个闭包" class="headerlink" title="3.3 多个闭包"></a>3.3 多个闭包</h3><p>如上面的代码中，调用了2次<code>counter</code>，也就意味着创建了2个闭包，并且每个闭包之间没有任何关系。</p><p>大家是否有种感觉，好像闭包与对象有些类似。确实是这样的，对象其实可通俗的理解为数据(属性)+功能(方法)，而闭包也可以理解为数据+功能，只不过此时数据是外部函数中的那些局部变量或者形参，而功能则是内部函数。对象适合完成较为复杂的功能，而闭包则更轻量</p><h2 id="4-闭包应用"><a href="#4-闭包应用" class="headerlink" title="4. 闭包应用"></a>4. 闭包应用</h2><p>下面应用案例是理解闭包的经典题目，模拟了一个人站在原点，然后向X、Y轴进行移动，每次移动后及时打印当前的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>():<br>    pos = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>]  <span class="hljs-comment"># 坐标系统原点</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">player</span>(<span class="hljs-params">direction, step</span>):<br>        <span class="hljs-comment"># 这里应该首先判断参数direction,step的合法性，比如direction不能斜着走，step不能为负等</span><br>        <span class="hljs-comment"># 然后还要对新生成的x，y坐标的合法性进行判断处理，这里主要是想介绍闭包，就不详细写了</span><br>        new_x = pos[<span class="hljs-number">0</span>] + direction[<span class="hljs-number">0</span>] * step<br>        new_y = pos[<span class="hljs-number">1</span>] + direction[<span class="hljs-number">1</span>] * step<br>        pos[<span class="hljs-number">0</span>] = new_x<br>        pos[<span class="hljs-number">1</span>] = new_y<br>        <span class="hljs-keyword">return</span> pos<br><br>    <span class="hljs-keyword">return</span> player<br><br><br>player = create()  <span class="hljs-comment"># 创建棋子player，起点为原点</span><br><span class="hljs-built_in">print</span>(player([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-number">10</span>))  <span class="hljs-comment"># 向x轴正方向移动10步</span><br><span class="hljs-built_in">print</span>(player([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], <span class="hljs-number">20</span>))  <span class="hljs-comment"># 向y轴正方向移动20步</span><br><span class="hljs-built_in">print</span>(player([-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-number">10</span>))  <span class="hljs-comment"># 向x轴负方向移动10步</span><br><br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E9%97%AD%E5%8C%85/6.png"></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><ol><li>闭包定义是在函数内再嵌套函数</li><li>闭包是可以访问另一个函数局部作用域中变量的函数</li><li>闭包可以读取另外一个函数内部的变量</li><li>闭包可以让参数和变量不会被垃圾回收机制回收，始终保持在内存中（而普通的函数调用结束后 会被Python解释器自动释放局部变量）</li></ol>]]></content>
    
    
    <categories>
      
      <category>python高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>闭包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成器</title>
    <link href="/2022/05/03/%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/2022/05/03/%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-生成器"><a href="#1-生成器" class="headerlink" title="1.生成器"></a>1.生成器</h2><h3 id="1-1什么是生成器"><a href="#1-1什么是生成器" class="headerlink" title="1.1什么是生成器"></a>1.1什么是生成器</h3><p>通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p><p>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的<code>list</code>，从而节省大量的空间。</p><p>通俗的理解：</p><p>在Python中，这种一边循环一边计算的机制，称为生成器：generator</p><h3 id="1-2-生成器"><a href="#1-2-生成器" class="headerlink" title="1.2 生成器"></a>1.2 生成器</h3><p>其实利用迭代器，我们也可以在每次迭代获取数据（通过<code>next()</code>方法）时按照特定的规律进行生成。</p><p>但是在实现一个迭代器时，关于当前迭代到的状态需要我们自己记录，进而才能根据当前状态生成下一个数据。</p><p>为了达到记录当前状态，并配合<code>next()</code>函数进行迭代使用，</p><p>简言之，迭代器是可以实现在循环的过程中生成数据的，但是稍稍有些复杂</p><p>有一个能具有迭代器的功能，且比它更加简单的方式：生成器(<code>generator</code>)</p><p>生成器是一类特殊的迭代器</p><h3 id="1-3创建一个生成器"><a href="#1-3创建一个生成器" class="headerlink" title="1.3创建一个生成器"></a>1.3创建一个生成器</h3><ul><li><p>方法一</p><p>第一种方法很简单，只需要把一个列表生成式的<code>[]</code>改成’()’就可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(nums))<br><span class="hljs-built_in">print</span>(nums)<br><br>nums2 = (x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(nums2))<br><span class="hljs-built_in">print</span>(nums2)<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E7%94%9F%E6%88%90%E5%99%A8/1.png"></p><p>说明：</p><ol><li>区别在于最外层<code>[]</code>和<code>()</code>，nums是一个列表，而nums2是一个生成器</li><li>可以直接打印出列表<code>nums</code>的每一个元素，而对于生成器<code>nums2</code>，我们可以按照迭代器的使用方法来使用，即可以通过<code>next()</code>函数、<code>for</code>循环、<code>list()</code>等方法使用</li></ol></li><li><p>方法二</p><p><code>generator</code>功能十分强大</p><p>我们使用不同的方法来实现斐波那契数列进行比较</p><blockquote><p><strong>斐波那契数列</strong>指的是这样一个数列 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233，377，610，987，1597，2584，4181，6765，10946，17711，28657，46368……..</p><p>这个数列从第3项开始，每一项都等于前两项之和。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">nums1 = <span class="hljs-number">1</span><br>nums2 = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(nums1)<br><br>nums1, nums2 = nums2, nums1 + nums2<br><span class="hljs-built_in">print</span>(nums1)<br><br>nums1, nums2 = nums2, nums1 + nums2<br><span class="hljs-built_in">print</span>(nums1)<br><br>nums1, nums2 = nums2, nums1 + nums2<br><span class="hljs-built_in">print</span>(nums1)<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E7%94%9F%E6%88%90%E5%99%A8/2.png"></p><p>下面使用迭代器来实现一个斐波那契数列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FibIterator</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.num1 = <span class="hljs-number">1</span><br>        self.num2 = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        temp = self.num1<br>        self.num1, self.num2 = self.num2, self.num1 + self.num2<br>        <span class="hljs-keyword">return</span> temp<br><br>fib = FibIterator()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E7%94%9F%E6%88%90%E5%99%A8/3.png"></p><p>使用迭代器可以实现但是略显麻烦，下面是使用生成器的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib_generator</span>():<br>    num1 = <span class="hljs-number">1</span><br>    num2 = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        temp = num1<br>        num1, num2 = num2, num1 + num2<br>        <span class="hljs-keyword">yield</span> temp<br><br><br>fib = fib_generator()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E7%94%9F%E6%88%90%E5%99%A8/4.png"></p><p>在使用生成器实现的方式中，我们将原本在迭代器<code>__next__</code>方法中实现的基本逻辑放到一个函数中来实现，但是将每次迭代返回数值的<code>return</code>换成了<code>yield</code>，此时新定义的函数便不再是函数，而是一个<strong>生成器</strong>了</p><p>简单来说：只要在<code>def函数</code>中有<code>yield</code>关键字的 就称为 生成器</p><p>此时按照调用函数的方式( <code>fib = fib_generator()</code> )就不再是执行函数体了，而是会返回一个生成器对象，然后就可以按照使用迭代器(因为生成器是一种特殊的迭代器)的方式来使用生成器了</p></li></ul><h2 id="2-yield关键字"><a href="#2-yield关键字" class="headerlink" title="2.yield关键字"></a>2.<code>yield</code>关键字</h2><p>上面的代码，在函数中使用了<code>yield</code>关键字</p><p>说明：</p><ol><li>只要有<code>yield</code>关键字，那么虽然看上去是调用函数，实际上已经变成了创建一个 生成器对象</li><li>通过<code>next</code>调用 生成器，可以让 这个带有<code>yield</code>的方法代码块，开始执行<ul><li>如果是第一次执行，则从<code>def</code>代码块的开始部分执行，直到遇到<code>yield</code>为止，并且把<code>yield</code>关键字后的数值返回，当做<code>next()</code>的返回值</li><li>如果不是第一次执行，则从上一次暂停的位置执行(即从上一次<code>yield</code>关键字的下一个语句开始执行)，直到遇到下一次<code>yield</code>为止，并且把<code>yield</code>关键字后的数值返回，当做<code>next()</code>的返回值</li></ul></li></ol><p>更好的理解带有<code>yield</code>关键字的函数，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib_generator</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---1---&quot;</span>)<br>    num1 = <span class="hljs-number">1</span><br>    num2 = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---2---&quot;</span>)<br>        temp_num = num1<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---3---&quot;</span>)<br>        num1, num2 = num2, num1+num2<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---4---&quot;</span>)<br>        <span class="hljs-keyword">yield</span> temp_num<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---5---&quot;</span>)<br><br>fib = fib_generator()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;执行第1次的next函数---开始--&quot;</span>)<br>num = <span class="hljs-built_in">next</span>(fib)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;执行第1次的next函数---结束--&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打印第1次next返回的结果--开始--&quot;</span>)<br><span class="hljs-built_in">print</span>(num)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打印第1次next返回的结果--结束--&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;执行第2次的next函数---开始--&quot;</span>)<br>num = <span class="hljs-built_in">next</span>(fib)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;执行第2次的next函数---结束--&quot;</span>)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打印第2次next返回的结果--开始--&quot;</span>)<br><span class="hljs-built_in">print</span>(num)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打印第2次next返回的结果--结束--&quot;</span>)<br></code></pre></td></tr></table></figure><p>运行效果如下：</p><p><img src="/%E7%94%9F%E6%88%90%E5%99%A8/5.png"></p><p>注意：</p><ol><li><p>要知道一个<code>def</code>代码块，只要有<code>yield</code>就不再是函数，而是生成器</p></li><li><p>要知道调用<code>def</code>代码块(普通函数)与调用带有<code>yield</code>的<code>def</code>代码块(生成器)的调用方式不同</p></li><li><p>要注意<code>return</code>与<code>yield</code>的功能也不同</p><ul><li><p><code>return</code>接收一个函数，且有返回值</p></li><li><p><code>yield</code>暂停执行一个函数，且有返回值</p></li></ul></li></ol><h2 id="3-使用send唤醒"><a href="#3-使用send唤醒" class="headerlink" title="3.使用send唤醒"></a>3.使用send唤醒</h2><p>我们除了可以使用<code>next()</code>函数来唤醒，让生成器继续执行外，还可以使用<code>send()</code>函数来唤醒执行。</p><p>使用<code>send()</code>函数的一个好处是：可以在唤醒的同时向断点处传入一个附加数据</p><h3 id="3-1测试send"><a href="#3-1测试send" class="headerlink" title="3.1测试send"></a>3.1测试<code>send</code></h3><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generator_test</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--1--&quot;</span>)<br>        num = <span class="hljs-keyword">yield</span> <span class="hljs-number">100</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--2--&quot;</span>, <span class="hljs-string">&quot;num=&quot;</span>, num)<br><br><br>g = generator_test()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br><br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E7%94%9F%E6%88%90%E5%99%A8/6.png"></p><p>我们可以看到num是没有值的</p><p>如果我们使用<code>send</code>唤醒，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generator_test</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--1--&quot;</span>)<br>        num = <span class="hljs-keyword">yield</span> <span class="hljs-number">100</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--2--&quot;</span>, <span class="hljs-string">&quot;num=&quot;</span>, num)<br><br><br>g = generator_test()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br><span class="hljs-built_in">print</span>(g.send(<span class="hljs-number">11</span>))<br><span class="hljs-built_in">print</span>(g.send(<span class="hljs-number">22</span>))<br></code></pre></td></tr></table></figure><p>运行效果如下：</p><p><img src="/%E7%94%9F%E6%88%90%E5%99%A8/7.png"></p><p>注意send是不可以传递空值的这样会报错</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>使用了<code>yield</code>关键字的函数不再是函数，而是生成器</p></li><li><p><code>yield</code>关键字有两点作用：</p><ul><li><p>保存当前运行状态（断点），然后暂停执行，即将生成器（函数）挂起</p></li><li><p>将<code>yield</code>关键字后面表达式的值作为返回值返回，此时可以理解为起到了<code>return</code>的作用</p></li></ul></li><li><p>可以使用<code>next()</code>函数让生成器从断点处继续执行，即唤醒生成器（函数）</p></li><li><p>Python3中的生成器可以使用<code>return</code>返回最终运行的返回值</p></li><li><p>生成器是这样一个函数，它记住上一次返回时在函数体中的位置。对生成器函数的第二次（或第 n 次）调用跳转至该函数中间，而上次调用的所有局部变量都保持不变。生成器不仅“记住”了它数据状态；生成器还“记住”了它在流控制构造（在命令式编程中，这种构造不只是数据值）中的位置。</p></li><li><p>生成器的特点：</p><ol><li>存储的是生成数据的方式（即算法），而不是存储生成的数据，因此节约内存</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>python高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>生成器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迭代器</title>
    <link href="/2022/05/03/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <url>/2022/05/03/%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是迭代"><a href="#1-什么是迭代" class="headerlink" title="1. 什么是迭代"></a>1. 什么是迭代</h2><p>迭代时访问集合元素的一种方式</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>]<br><br><span class="hljs-comment"># 可以通过for循环将nums列表中的每个数据依次获取</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>    <span class="hljs-built_in">print</span>(num)<br><br><br>name = <span class="hljs-string">&quot;teacher&quot;</span><br><br><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> name:<br>    <span class="hljs-built_in">print</span>(temp)<br><br></code></pre></td></tr></table></figure><p>运行效果</p><p><img src="/%E8%BF%AD%E4%BB%A3%E5%99%A8/image-20190226201002936.png"></p><h2 id="2-可迭代对象"><a href="#2-可迭代对象" class="headerlink" title="2. 可迭代对象"></a>2. 可迭代对象</h2><p>我们可以通俗地认为：</p><blockquote><p><strong>只要是可以通过for…in…的形式进行遍历的，那么这个数据类型就是可以迭代的</strong></p></blockquote><p>在python中可迭代的数据类型有：</p><ul><li>列表</li><li>元组</li><li>字典</li><li>字符串</li></ul><p>不可迭代的数据类型有：</p><ul><li>整形</li><li>浮点型</li></ul><h2 id="3-迭代器"><a href="#3-迭代器" class="headerlink" title="3. 迭代器"></a>3. 迭代器</h2><p>迭代器是一个可以记住遍历位置的对象。迭代器对象从第一个元素开始访问，直到所有的元素访问结束。迭代器只能往前不能后退。</p><h3 id="3-1-可迭代对象的本质"><a href="#3-1-可迭代对象的本质" class="headerlink" title="3.1 可迭代对象的本质"></a>3.1 可迭代对象的本质</h3><p>分析 可迭代对象 进行迭代的过程，发现每迭代一次（即在<code>for...in...</code>中每循环一次）都会返回对象中的下一条数据，一直向后读取数据直到迭代了所有数据后结束。</p><p>那么，在这个过程中就应该有一个“人”去记录每次访问到了第几条数据，以便每次迭代都可以返回下一条数据。我们把这个能帮助我们进行数据迭代的“人”称为迭代器(Iterator)</p><p>可迭代对象的本质就是可以向我们提供一个这样的中间“人”，即迭代器帮助我们对其进行迭代遍历使用。</p><p><code>list</code>、<code>tuple</code>等都是可迭代对象，我们可以通过<code>iter()</code>函数获取这些可迭代对象的迭代器。然后我们可以对获取到的迭代器不断使用<code>next()</code>函数来获取下一条数据。</p><h3 id="3-2-获取可迭代对象的迭代器"><a href="#3-2-获取可迭代对象的迭代器" class="headerlink" title="3.2 获取可迭代对象的迭代器"></a>3.2 获取可迭代对象的迭代器</h3><p>我们可以通过<code>iter</code>方法获取可迭代对象的迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterator<br>nums = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(nums))<br>nums_iter = <span class="hljs-built_in">iter</span>(nums)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(nums_iter))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(nums,Iterator))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(nums_iter,Iterator))<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E8%BF%AD%E4%BB%A3%E5%99%A8/2.png"></p><p>可以看到<code>list</code>是一个可迭代对象，但并不是一个迭代器，使用<code>iter</code>方法可以获取他的迭代器。</p><h3 id="3-3-获取迭代器的数据"><a href="#3-3-获取迭代器的数据" class="headerlink" title="3.3 获取迭代器的数据"></a>3.3 获取迭代器的数据</h3><p>此时我们可以通过next方法获取迭代器数据</p><p>测试代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterator<br><br><br>nums = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>]<br>nums_iter = <span class="hljs-built_in">iter</span>(nums)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nums&quot;</span>, <span class="hljs-built_in">isinstance</span>(nums, Iterator))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nums_iter&quot;</span>, <span class="hljs-built_in">isinstance</span>(nums_iter, Iterator))<br><br><br>num1 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num1)<br><br>num2 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num2)<br><br>num3 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num3)<br><br>num4 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num4)<br><br></code></pre></td></tr></table></figure><h3 id="3-4-StopIteration异常"><a href="#3-4-StopIteration异常" class="headerlink" title="3.4 StopIteration异常"></a>3.4 StopIteration异常</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterator<br><br><br>nums = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>]<br>nums_iter = <span class="hljs-built_in">iter</span>(nums)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nums&quot;</span>, <span class="hljs-built_in">isinstance</span>(nums, Iterator))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nums_iter&quot;</span>, <span class="hljs-built_in">isinstance</span>(nums_iter, Iterator))<br><br><br>num1 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num1)<br><br>num2 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num2)<br><br>num3 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num3)<br><br>num4 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num4)<br><br>num5 = <span class="hljs-built_in">next</span>(nums_iter)  <span class="hljs-comment"># 这里会产生异常</span><br><span class="hljs-built_in">print</span>(num5)<br><br></code></pre></td></tr></table></figure><p>此时<code>nums</code>列表中只有4个数据，所以第五次调用<code>next()</code>方法就会产生异常，我们使用<code>try...except...</code>即可解决。</p><h2 id="4-自定义迭代器"><a href="#4-自定义迭代器" class="headerlink" title="4. 自定义迭代器"></a>4. 自定义迭代器</h2><ul><li><code>__iter__</code>方法</li><li><code>__next__</code>方法</li></ul><h3 id="4-1-iter-方法"><a href="#4-1-iter-方法" class="headerlink" title="4.1 __iter__方法"></a>4.1 <code>__iter__</code>方法</h3><blockquote><p>只要在类中，定义了<code>__iter__</code>方法，那么这个类就是可迭代对象</p></blockquote><p>测试代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterable<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyList</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.container = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, item</span>):<br>        self.container.append(item)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>mylist = MyList()<br>mylist.add(<span class="hljs-number">11</span>)<br>mylist.add(<span class="hljs-number">22</span>)<br>mylist.add(<span class="hljs-number">33</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mylist是否是可以迭代对象&quot;</span>, <span class="hljs-built_in">isinstance</span>(mylist, Iterable))<br><br><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> mylist:<br>    <span class="hljs-built_in">print</span>(temp)<br><br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E8%BF%AD%E4%BB%A3%E5%99%A8/3.png"></p><p>可以看出一个类只要有<code>__iter__</code>方法，那么这个类就是可迭代对象</p><p>当我们调用<code>iter()</code>函数提取一个可迭代对象的迭代器时，实际上就会调用<code>__iter__</code>方法，并返回迭代器。</p><h3 id="4-2-next-方法"><a href="#4-2-next-方法" class="headerlink" title="4.2 __next__方法"></a>4.2 <code>__next__</code>方法</h3><p>当我们对迭代器使用<code>next()</code>函数的时候，迭代器会向我们返回它所记录位置的下一个位置的数据。</p><p>实际上，在使用<code>next()</code>函数的时候，调用的就是迭代器对象的<code>__next__</code>方法（Python3中是对象的<code>__next__</code>方法，Python2中是对象的<code>next()</code>方法）。</p><p>所以，我们要想构造一个迭代器，就要实现它的<code>__next__</code>方法。</p><p>但这还不够，python要求迭代器本身也是可迭代的，所以我们还要为迭代器实现<code>__iter__</code>方法，而<code>__iter__</code>方法要返回一个迭代器，迭代器自身正是一个迭代器，所以迭代器的<code>__iter__</code>方法返回自身即可。</p><p>一个实现了<code>__iter__</code>方法和<code>__next__</code>方法的对象，就是迭代器</p><p>我们可以通过<code>isinstance()</code>判断一个对象是否是迭代器对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">56</span>]: <span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterator<br><br>In [<span class="hljs-number">57</span>]: <span class="hljs-built_in">isinstance</span>([], Iterator)<br>Out[<span class="hljs-number">57</span>]: <span class="hljs-literal">False</span><br><br>In [<span class="hljs-number">58</span>]: <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">iter</span>([]), Iterator)<br>Out[<span class="hljs-number">58</span>]: <span class="hljs-literal">True</span><br><br>In [<span class="hljs-number">59</span>]: <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">iter</span>(<span class="hljs-string">&quot;abc&quot;</span>), Iterator)<br>Out[<span class="hljs-number">59</span>]: <span class="hljs-literal">True</span><br><br></code></pre></td></tr></table></figure><h3 id="4-3-实现一个迭代器"><a href="#4-3-实现一个迭代器" class="headerlink" title="4.3 实现一个迭代器"></a>4.3 实现一个迭代器</h3><p>此时，我们实现一个类的<code>__next__</code>方法和<code>__iter__</code>方法即可实现一个迭代器</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIterator</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.mylist = []<br>        <span class="hljs-comment"># current用来记录当前访问到的位置</span><br>        self.current = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.current &lt; <span class="hljs-built_in">len</span>(self.mylist):<br>            item = self.mylist[self.current]<br>            self.current += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> item<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> StopIteration<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, val</span>):<br>        self.mylist.append(val)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    mylist = MyIterator()<br>    mylist.add(<span class="hljs-number">1</span>)<br>    mylist.add(<span class="hljs-number">2</span>)<br>    mylist.add(<span class="hljs-number">3</span>)<br>    mylist.add(<span class="hljs-number">4</span>)<br>    mylist.add(<span class="hljs-number">5</span>)<br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> mylist:<br>        <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/%E8%BF%AD%E4%BB%A3%E5%99%A8/4.png"></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><ul><li>凡是可作用于<code>for </code>循环的对象都是<code> Iterable</code> 类型；</li><li>凡是可作用于 <code>next()</code> 函数的对象都是<code> Iterator</code> 类型</li><li>集合数据类型如<code> list</code> 、<code>dict</code>、<code>str</code>等是 <code>Iterable </code>但不是<code>Iterator</code>，不过可以通过 <code>iter() </code>函数获得一个 <code>Iterator </code>对象</li></ul>]]></content>
    
    
    <categories>
      
      <category>python高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>迭代器</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
