<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>生成器</title>
    <link href="/2022/05/03/%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/2022/05/03/%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-生成器"><a href="#1-生成器" class="headerlink" title="1.生成器"></a>1.生成器</h2><h3 id="1-1什么是生成器"><a href="#1-1什么是生成器" class="headerlink" title="1.1什么是生成器"></a>1.1什么是生成器</h3><p>通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p><p>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的<code>list</code>，从而节省大量的空间。</p><p>通俗的理解：</p><p>在Python中，这种一边循环一边计算的机制，称为生成器：generator</p><h3 id="1-2-生成器"><a href="#1-2-生成器" class="headerlink" title="1.2 生成器"></a>1.2 生成器</h3><p>其实利用迭代器，我们也可以在每次迭代获取数据（通过<code>next()</code>方法）时按照特定的规律进行生成。</p><p>但是在实现一个迭代器时，关于当前迭代到的状态需要我们自己记录，进而才能根据当前状态生成下一个数据。</p><p>为了达到记录当前状态，并配合<code>next()</code>函数进行迭代使用，</p><p>简言之，迭代器是可以实现在循环的过程中生成数据的，但是稍稍有些复杂</p><p>有一个能具有迭代器的功能，且比它更加简单的方式：生成器(<code>generator</code>)</p><p>生成器是一类特殊的迭代器</p><h3 id="1-3创建一个生成器"><a href="#1-3创建一个生成器" class="headerlink" title="1.3创建一个生成器"></a>1.3创建一个生成器</h3><ul><li><p>方法一</p><p>第一种方法很简单，只需要把一个列表生成式的<code>[]</code>改成’()’就可</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs python">nums = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(nums))<br><span class="hljs-built_in">print</span>(nums)<br><br>nums2 = (x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(nums2))<br><span class="hljs-built_in">print</span>(nums2)<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E7%94%9F%E6%88%90%E5%99%A8/1.png"></p><p>说明：</p><ol><li>区别在于最外层<code>[]</code>和<code>()</code>，nums是一个列表，而nums2是一个生成器</li><li>可以直接打印出列表<code>nums</code>的每一个元素，而对于生成器<code>nums2</code>，我们可以按照迭代器的使用方法来使用，即可以通过<code>next()</code>函数、<code>for</code>循环、<code>list()</code>等方法使用</li></ol></li><li><p>方法二</p><p><code>generator</code>功能十分强大</p><p>我们使用不同的方法来实现斐波那契数列进行比较</p><blockquote><p><strong>斐波那契数列</strong>指的是这样一个数列 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233，377，610，987，1597，2584，4181，6765，10946，17711，28657，46368……..</p><p>这个数列从第3项开始，每一项都等于前两项之和。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">nums1 = <span class="hljs-number">1</span><br>nums2 = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(nums1)<br><br>nums1, nums2 = nums2, nums1 + nums2<br><span class="hljs-built_in">print</span>(nums1)<br><br>nums1, nums2 = nums2, nums1 + nums2<br><span class="hljs-built_in">print</span>(nums1)<br><br>nums1, nums2 = nums2, nums1 + nums2<br><span class="hljs-built_in">print</span>(nums1)<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E7%94%9F%E6%88%90%E5%99%A8/2.png"></p><p>下面使用迭代器来实现一个斐波那契数列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FibIterator</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.num1 = <span class="hljs-number">1</span><br>        self.num2 = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        temp = self.num1<br>        self.num1, self.num2 = self.num2, self.num1 + self.num2<br>        <span class="hljs-keyword">return</span> temp<br><br>fib = FibIterator()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E7%94%9F%E6%88%90%E5%99%A8/3.png"></p><p>使用迭代器可以实现但是略显麻烦，下面是使用生成器的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib_generator</span>():<br>    num1 = <span class="hljs-number">1</span><br>    num2 = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        temp = num1<br>        num1, num2 = num2, num1 + num2<br>        <span class="hljs-keyword">yield</span> temp<br><br><br>fib = fib_generator()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(fib))<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E7%94%9F%E6%88%90%E5%99%A8/4.png"></p><p>在使用生成器实现的方式中，我们将原本在迭代器<code>__next__</code>方法中实现的基本逻辑放到一个函数中来实现，但是将每次迭代返回数值的<code>return</code>换成了<code>yield</code>，此时新定义的函数便不再是函数，而是一个<strong>生成器</strong>了</p><p>简单来说：只要在<code>def函数</code>中有<code>yield</code>关键字的 就称为 生成器</p><p>此时按照调用函数的方式( <code>fib = fib_generator()</code> )就不再是执行函数体了，而是会返回一个生成器对象，然后就可以按照使用迭代器(因为生成器是一种特殊的迭代器)的方式来使用生成器了</p></li></ul><h2 id="2-yield关键字"><a href="#2-yield关键字" class="headerlink" title="2.yield关键字"></a>2.<code>yield</code>关键字</h2><p>上面的代码，在函数中使用了<code>yield</code>关键字</p><p>说明：</p><ol><li>只要有<code>yield</code>关键字，那么虽然看上去是调用函数，实际上已经变成了创建一个 生成器对象</li><li>通过<code>next</code>调用 生成器，可以让 这个带有<code>yield</code>的方法代码块，开始执行<ul><li>如果是第一次执行，则从<code>def</code>代码块的开始部分执行，直到遇到<code>yield</code>为止，并且把<code>yield</code>关键字后的数值返回，当做<code>next()</code>的返回值</li><li>如果不是第一次执行，则从上一次暂停的位置执行(即从上一次<code>yield</code>关键字的下一个语句开始执行)，直到遇到下一次<code>yield</code>为止，并且把<code>yield</code>关键字后的数值返回，当做<code>next()</code>的返回值</li></ul></li></ol><p>更好的理解带有<code>yield</code>关键字的函数，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fib_generator</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---1---&quot;</span>)<br>    num1 = <span class="hljs-number">1</span><br>    num2 = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---2---&quot;</span>)<br>        temp_num = num1<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---3---&quot;</span>)<br>        num1, num2 = num2, num1+num2<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---4---&quot;</span>)<br>        <span class="hljs-keyword">yield</span> temp_num<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---5---&quot;</span>)<br><br>fib = fib_generator()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;执行第1次的next函数---开始--&quot;</span>)<br>num = <span class="hljs-built_in">next</span>(fib)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;执行第1次的next函数---结束--&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打印第1次next返回的结果--开始--&quot;</span>)<br><span class="hljs-built_in">print</span>(num)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打印第1次next返回的结果--结束--&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;执行第2次的next函数---开始--&quot;</span>)<br>num = <span class="hljs-built_in">next</span>(fib)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;执行第2次的next函数---结束--&quot;</span>)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打印第2次next返回的结果--开始--&quot;</span>)<br><span class="hljs-built_in">print</span>(num)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打印第2次next返回的结果--结束--&quot;</span>)<br></code></pre></td></tr></table></figure><p>运行效果如下：</p><p><img src="/%E7%94%9F%E6%88%90%E5%99%A8/5.png"></p><p>注意：</p><ol><li><p>要知道一个<code>def</code>代码块，只要有<code>yield</code>就不再是函数，而是生成器</p></li><li><p>要知道调用<code>def</code>代码块(普通函数)与调用带有<code>yield</code>的<code>def</code>代码块(生成器)的调用方式不同</p></li><li><p>要注意<code>return</code>与<code>yield</code>的功能也不同</p><ul><li><p><code>return</code>接收一个函数，且有返回值</p></li><li><p><code>yield</code>暂停执行一个函数，且有返回值</p></li></ul></li></ol><h2 id="3-使用send唤醒"><a href="#3-使用send唤醒" class="headerlink" title="3.使用send唤醒"></a>3.使用send唤醒</h2><p>我们除了可以使用<code>next()</code>函数来唤醒，让生成器继续执行外，还可以使用<code>send()</code>函数来唤醒执行。</p><p>使用<code>send()</code>函数的一个好处是：可以在唤醒的同时向断点处传入一个附加数据</p><h3 id="3-1测试send"><a href="#3-1测试send" class="headerlink" title="3.1测试send"></a>3.1测试<code>send</code></h3><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generator_test</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--1--&quot;</span>)<br>        num = <span class="hljs-keyword">yield</span> <span class="hljs-number">100</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--2--&quot;</span>, <span class="hljs-string">&quot;num=&quot;</span>, num)<br><br><br>g = generator_test()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br><br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E7%94%9F%E6%88%90%E5%99%A8/6.png"></p><p>我们可以看到num是没有值的</p><p>如果我们使用<code>send</code>唤醒，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generator_test</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--1--&quot;</span>)<br>        num = <span class="hljs-keyword">yield</span> <span class="hljs-number">100</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--2--&quot;</span>, <span class="hljs-string">&quot;num=&quot;</span>, num)<br><br><br>g = generator_test()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(g))<br><span class="hljs-built_in">print</span>(g.send(<span class="hljs-number">11</span>))<br><span class="hljs-built_in">print</span>(g.send(<span class="hljs-number">22</span>))<br></code></pre></td></tr></table></figure><p>运行效果如下：</p><p><img src="/%E7%94%9F%E6%88%90%E5%99%A8/7.png"></p><p>注意send是不可以传递空值的这样会报错</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>使用了<code>yield</code>关键字的函数不再是函数，而是生成器</p></li><li><p><code>yield</code>关键字有两点作用：</p><ul><li><p>保存当前运行状态（断点），然后暂停执行，即将生成器（函数）挂起</p></li><li><p>将<code>yield</code>关键字后面表达式的值作为返回值返回，此时可以理解为起到了<code>return</code>的作用</p></li></ul></li><li><p>可以使用<code>next()</code>函数让生成器从断点处继续执行，即唤醒生成器（函数）</p></li><li><p>Python3中的生成器可以使用<code>return</code>返回最终运行的返回值</p></li><li><p>生成器是这样一个函数，它记住上一次返回时在函数体中的位置。对生成器函数的第二次（或第 n 次）调用跳转至该函数中间，而上次调用的所有局部变量都保持不变。生成器不仅“记住”了它数据状态；生成器还“记住”了它在流控制构造（在命令式编程中，这种构造不只是数据值）中的位置。</p></li><li><p>生成器的特点：</p><ol><li>存储的是生成数据的方式（即算法），而不是存储生成的数据，因此节约内存</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>python高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>生成器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迭代器</title>
    <link href="/2022/05/03/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <url>/2022/05/03/%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是迭代"><a href="#1-什么是迭代" class="headerlink" title="1. 什么是迭代"></a>1. 什么是迭代</h2><p>迭代时访问集合元素的一种方式</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs python">nums = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>]<br><br><span class="hljs-comment"># 可以通过for循环将nums列表中的每个数据依次获取</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>    <span class="hljs-built_in">print</span>(num)<br><br><br>name = <span class="hljs-string">&quot;teacher&quot;</span><br><br><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> name:<br>    <span class="hljs-built_in">print</span>(temp)<br><br></code></pre></td></tr></table></figure><p>运行效果</p><p><img src="/%E8%BF%AD%E4%BB%A3%E5%99%A8/image-20190226201002936.png"></p><h2 id="2-可迭代对象"><a href="#2-可迭代对象" class="headerlink" title="2. 可迭代对象"></a>2. 可迭代对象</h2><p>我们可以通俗地认为：</p><blockquote><p><strong>只要是可以通过for…in…的形式进行遍历的，那么这个数据类型就是可以迭代的</strong></p></blockquote><p>在python中可迭代的数据类型有：</p><ul><li>列表</li><li>元组</li><li>字典</li><li>字符串</li></ul><p>不可迭代的数据类型有：</p><ul><li>整形</li><li>浮点型</li></ul><h2 id="3-迭代器"><a href="#3-迭代器" class="headerlink" title="3. 迭代器"></a>3. 迭代器</h2><p>迭代器是一个可以记住遍历位置的对象。迭代器对象从第一个元素开始访问，直到所有的元素访问结束。迭代器只能往前不能后退。</p><h3 id="3-1-可迭代对象的本质"><a href="#3-1-可迭代对象的本质" class="headerlink" title="3.1 可迭代对象的本质"></a>3.1 可迭代对象的本质</h3><p>分析 可迭代对象 进行迭代的过程，发现每迭代一次（即在<code>for...in...</code>中每循环一次）都会返回对象中的下一条数据，一直向后读取数据直到迭代了所有数据后结束。</p><p>那么，在这个过程中就应该有一个“人”去记录每次访问到了第几条数据，以便每次迭代都可以返回下一条数据。我们把这个能帮助我们进行数据迭代的“人”称为迭代器(Iterator)</p><p>可迭代对象的本质就是可以向我们提供一个这样的中间“人”，即迭代器帮助我们对其进行迭代遍历使用。</p><p><code>list</code>、<code>tuple</code>等都是可迭代对象，我们可以通过<code>iter()</code>函数获取这些可迭代对象的迭代器。然后我们可以对获取到的迭代器不断使用<code>next()</code>函数来获取下一条数据。</p><h3 id="3-2-获取可迭代对象的迭代器"><a href="#3-2-获取可迭代对象的迭代器" class="headerlink" title="3.2 获取可迭代对象的迭代器"></a>3.2 获取可迭代对象的迭代器</h3><p>我们可以通过<code>iter</code>方法获取可迭代对象的迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterator<br>nums = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(nums))<br>nums_iter = <span class="hljs-built_in">iter</span>(nums)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(nums_iter))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(nums,Iterator))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(nums_iter,Iterator))<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E8%BF%AD%E4%BB%A3%E5%99%A8/2.png"></p><p>可以看到<code>list</code>是一个可迭代对象，但并不是一个迭代器，使用<code>iter</code>方法可以获取他的迭代器。</p><h3 id="3-3-获取迭代器的数据"><a href="#3-3-获取迭代器的数据" class="headerlink" title="3.3 获取迭代器的数据"></a>3.3 获取迭代器的数据</h3><p>此时我们可以通过next方法获取迭代器数据</p><p>测试代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterator<br><br><br>nums = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>]<br>nums_iter = <span class="hljs-built_in">iter</span>(nums)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nums&quot;</span>, <span class="hljs-built_in">isinstance</span>(nums, Iterator))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nums_iter&quot;</span>, <span class="hljs-built_in">isinstance</span>(nums_iter, Iterator))<br><br><br>num1 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num1)<br><br>num2 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num2)<br><br>num3 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num3)<br><br>num4 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num4)<br><br></code></pre></td></tr></table></figure><h3 id="3-4-StopIteration异常"><a href="#3-4-StopIteration异常" class="headerlink" title="3.4 StopIteration异常"></a>3.4 StopIteration异常</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterator<br><br><br>nums = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>]<br>nums_iter = <span class="hljs-built_in">iter</span>(nums)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nums&quot;</span>, <span class="hljs-built_in">isinstance</span>(nums, Iterator))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nums_iter&quot;</span>, <span class="hljs-built_in">isinstance</span>(nums_iter, Iterator))<br><br><br>num1 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num1)<br><br>num2 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num2)<br><br>num3 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num3)<br><br>num4 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num4)<br><br>num5 = <span class="hljs-built_in">next</span>(nums_iter)  <span class="hljs-comment"># 这里会产生异常</span><br><span class="hljs-built_in">print</span>(num5)<br><br></code></pre></td></tr></table></figure><p>此时<code>nums</code>列表中只有4个数据，所以第五次调用<code>next()</code>方法就会产生异常，我们使用<code>try...except...</code>即可解决。</p><h2 id="4-自定义迭代器"><a href="#4-自定义迭代器" class="headerlink" title="4. 自定义迭代器"></a>4. 自定义迭代器</h2><ul><li><code>__iter__</code>方法</li><li><code>__next__</code>方法</li></ul><h3 id="4-1-iter-方法"><a href="#4-1-iter-方法" class="headerlink" title="4.1 __iter__方法"></a>4.1 <code>__iter__</code>方法</h3><blockquote><p>只要在类中，定义了<code>__iter__</code>方法，那么这个类就是可迭代对象</p></blockquote><p>测试代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterable<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyList</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.container = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, item</span>):<br>        self.container.append(item)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>mylist = MyList()<br>mylist.add(<span class="hljs-number">11</span>)<br>mylist.add(<span class="hljs-number">22</span>)<br>mylist.add(<span class="hljs-number">33</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mylist是否是可以迭代对象&quot;</span>, <span class="hljs-built_in">isinstance</span>(mylist, Iterable))<br><br><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> mylist:<br>    <span class="hljs-built_in">print</span>(temp)<br><br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E8%BF%AD%E4%BB%A3%E5%99%A8/3.png"></p><p>可以看出一个类只要有<code>__iter__</code>方法，那么这个类就是可迭代对象</p><p>当我们调用<code>iter()</code>函数提取一个可迭代对象的迭代器时，实际上就会调用<code>__iter__</code>方法，并返回迭代器。</p><h3 id="4-2-next-方法"><a href="#4-2-next-方法" class="headerlink" title="4.2 __next__方法"></a>4.2 <code>__next__</code>方法</h3><p>当我们对迭代器使用<code>next()</code>函数的时候，迭代器会向我们返回它所记录位置的下一个位置的数据。</p><p>实际上，在使用<code>next()</code>函数的时候，调用的就是迭代器对象的<code>__next__</code>方法（Python3中是对象的<code>__next__</code>方法，Python2中是对象的<code>next()</code>方法）。</p><p>所以，我们要想构造一个迭代器，就要实现它的<code>__next__</code>方法。</p><p>但这还不够，python要求迭代器本身也是可迭代的，所以我们还要为迭代器实现<code>__iter__</code>方法，而<code>__iter__</code>方法要返回一个迭代器，迭代器自身正是一个迭代器，所以迭代器的<code>__iter__</code>方法返回自身即可。</p><p>一个实现了<code>__iter__</code>方法和<code>__next__</code>方法的对象，就是迭代器</p><p>我们可以通过<code>isinstance()</code>判断一个对象是否是迭代器对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">56</span>]: <span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterator<br><br>In [<span class="hljs-number">57</span>]: <span class="hljs-built_in">isinstance</span>([], Iterator)<br>Out[<span class="hljs-number">57</span>]: <span class="hljs-literal">False</span><br><br>In [<span class="hljs-number">58</span>]: <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">iter</span>([]), Iterator)<br>Out[<span class="hljs-number">58</span>]: <span class="hljs-literal">True</span><br><br>In [<span class="hljs-number">59</span>]: <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">iter</span>(<span class="hljs-string">&quot;abc&quot;</span>), Iterator)<br>Out[<span class="hljs-number">59</span>]: <span class="hljs-literal">True</span><br><br></code></pre></td></tr></table></figure><h3 id="4-3-实现一个迭代器"><a href="#4-3-实现一个迭代器" class="headerlink" title="4.3 实现一个迭代器"></a>4.3 实现一个迭代器</h3><p>此时，我们实现一个类的<code>__next__</code>方法和<code>__iter__</code>方法即可实现一个迭代器</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIterator</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.mylist = []<br>        <span class="hljs-comment"># current用来记录当前访问到的位置</span><br>        self.current = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.current &lt; <span class="hljs-built_in">len</span>(self.mylist):<br>            item = self.mylist[self.current]<br>            self.current += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> item<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> StopIteration<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, val</span>):<br>        self.mylist.append(val)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    mylist = MyIterator()<br>    mylist.add(<span class="hljs-number">1</span>)<br>    mylist.add(<span class="hljs-number">2</span>)<br>    mylist.add(<span class="hljs-number">3</span>)<br>    mylist.add(<span class="hljs-number">4</span>)<br>    mylist.add(<span class="hljs-number">5</span>)<br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> mylist:<br>        <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/%E8%BF%AD%E4%BB%A3%E5%99%A8/4.png"></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><ul><li>凡是可作用于<code>for </code>循环的对象都是<code> Iterable</code> 类型；</li><li>凡是可作用于 <code>next()</code> 函数的对象都是<code> Iterator</code> 类型</li><li>集合数据类型如<code> list</code> 、<code>dict</code>、<code>str</code>等是 <code>Iterable </code>但不是<code>Iterator</code>，不过可以通过 <code>iter() </code>函数获得一个 <code>Iterator </code>对象</li></ul>]]></content>
    
    
    <categories>
      
      <category>python高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>迭代器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluid主题</title>
    <link href="/2022/05/01/Fluid%E4%B8%BB%E9%A2%98/"/>
    <url>/2022/05/01/Fluid%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="这是第一篇博客"><a href="#这是第一篇博客" class="headerlink" title="这是第一篇博客"></a>这是第一篇博客</h2><p>上周用Hexo搭了个博客，今天突发奇想换个主题，结果改配置文件的时候不知道动了哪个地方的代码，自己也没备份，直接寄，全部推倒重来，给我整麻了</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>看看能不能坚持写作，记录一下自己学到的东西</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid主题</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/01/hello-world/"/>
    <url>/2022/05/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
