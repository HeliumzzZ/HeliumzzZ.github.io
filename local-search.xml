<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>迭代器</title>
    <link href="/2022/05/03/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <url>/2022/05/03/%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-什么是迭代"><a href="#1-什么是迭代" class="headerlink" title="1. 什么是迭代"></a>1. 什么是迭代</h2><p>迭代时访问集合元素的一种方式</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs python">nums = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>]<br><br><span class="hljs-comment"># 可以通过for循环将nums列表中的每个数据依次获取</span><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>    <span class="hljs-built_in">print</span>(num)<br><br><br>name = <span class="hljs-string">&quot;teacher&quot;</span><br><br><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> name:<br>    <span class="hljs-built_in">print</span>(temp)<br><br></code></pre></td></tr></table></figure><p>运行效果</p><p><img src="/%E8%BF%AD%E4%BB%A3%E5%99%A8/image-20190226201002936.png"></p><h2 id="2-可迭代对象"><a href="#2-可迭代对象" class="headerlink" title="2. 可迭代对象"></a>2. 可迭代对象</h2><p>我们可以通俗地认为：</p><blockquote><p><strong>只要是可以通过for…in…的形式进行遍历的，那么这个数据类型就是可以迭代的</strong></p></blockquote><p>在python中可迭代的数据类型有：</p><ul><li>列表</li><li>元组</li><li>字典</li><li>字符串</li></ul><p>不可迭代的数据类型有：</p><ul><li>整形</li><li>浮点型</li></ul><h2 id="3-迭代器"><a href="#3-迭代器" class="headerlink" title="3. 迭代器"></a>3. 迭代器</h2><p>迭代器是一个可以记住遍历位置的对象。迭代器对象从第一个元素开始访问，直到所有的元素访问结束。迭代器只能往前不能后退。</p><h3 id="3-1-可迭代对象的本质"><a href="#3-1-可迭代对象的本质" class="headerlink" title="3.1 可迭代对象的本质"></a>3.1 可迭代对象的本质</h3><p>分析 可迭代对象 进行迭代的过程，发现每迭代一次（即在<code>for...in...</code>中每循环一次）都会返回对象中的下一条数据，一直向后读取数据直到迭代了所有数据后结束。</p><p>那么，在这个过程中就应该有一个“人”去记录每次访问到了第几条数据，以便每次迭代都可以返回下一条数据。我们把这个能帮助我们进行数据迭代的“人”称为迭代器(Iterator)</p><p>可迭代对象的本质就是可以向我们提供一个这样的中间“人”，即迭代器帮助我们对其进行迭代遍历使用。</p><p><code>list</code>、<code>tuple</code>等都是可迭代对象，我们可以通过<code>iter()</code>函数获取这些可迭代对象的迭代器。然后我们可以对获取到的迭代器不断使用<code>next()</code>函数来获取下一条数据。</p><h3 id="3-2-获取可迭代对象的迭代器"><a href="#3-2-获取可迭代对象的迭代器" class="headerlink" title="3.2 获取可迭代对象的迭代器"></a>3.2 获取可迭代对象的迭代器</h3><p>我们可以通过<code>iter</code>方法获取可迭代对象的迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterator<br>nums = [<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">33</span>,<span class="hljs-number">44</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(nums))<br>nums_iter = <span class="hljs-built_in">iter</span>(nums)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(nums_iter))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(nums,Iterator))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(nums_iter,Iterator))<br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E8%BF%AD%E4%BB%A3%E5%99%A8/2.png"></p><p>可以看到<code>list</code>是一个可迭代对象，但并不是一个迭代器，使用<code>iter</code>方法可以获取他的迭代器。</p><h3 id="3-3-获取迭代器的数据"><a href="#3-3-获取迭代器的数据" class="headerlink" title="3.3 获取迭代器的数据"></a>3.3 获取迭代器的数据</h3><p>此时我们可以通过next方法获取迭代器数据</p><p>测试代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs PYTHON"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterator<br><br><br>nums = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>]<br>nums_iter = <span class="hljs-built_in">iter</span>(nums)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nums&quot;</span>, <span class="hljs-built_in">isinstance</span>(nums, Iterator))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nums_iter&quot;</span>, <span class="hljs-built_in">isinstance</span>(nums_iter, Iterator))<br><br><br>num1 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num1)<br><br>num2 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num2)<br><br>num3 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num3)<br><br>num4 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num4)<br><br></code></pre></td></tr></table></figure><h3 id="3-4-StopIteration异常"><a href="#3-4-StopIteration异常" class="headerlink" title="3.4 StopIteration异常"></a>3.4 StopIteration异常</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterator<br><br><br>nums = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>]<br>nums_iter = <span class="hljs-built_in">iter</span>(nums)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nums&quot;</span>, <span class="hljs-built_in">isinstance</span>(nums, Iterator))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nums_iter&quot;</span>, <span class="hljs-built_in">isinstance</span>(nums_iter, Iterator))<br><br><br>num1 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num1)<br><br>num2 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num2)<br><br>num3 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num3)<br><br>num4 = <span class="hljs-built_in">next</span>(nums_iter)<br><span class="hljs-built_in">print</span>(num4)<br><br>num5 = <span class="hljs-built_in">next</span>(nums_iter)  <span class="hljs-comment"># 这里会产生异常</span><br><span class="hljs-built_in">print</span>(num5)<br><br></code></pre></td></tr></table></figure><p>此时<code>nums</code>列表中只有4个数据，所以第五次调用<code>next()</code>方法就会产生异常，我们使用<code>try...except...</code>即可解决。</p><h2 id="4-自定义迭代器"><a href="#4-自定义迭代器" class="headerlink" title="4. 自定义迭代器"></a>4. 自定义迭代器</h2><ul><li><code>__iter__</code>方法</li><li><code>__next__</code>方法</li></ul><h3 id="4-1-iter-方法"><a href="#4-1-iter-方法" class="headerlink" title="4.1 __iter__方法"></a>4.1 <code>__iter__</code>方法</h3><blockquote><p>只要在类中，定义了<code>__iter__</code>方法，那么这个类就是可迭代对象</p></blockquote><p>测试代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterable<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyList</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.container = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, item</span>):<br>        self.container.append(item)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>mylist = MyList()<br>mylist.add(<span class="hljs-number">11</span>)<br>mylist.add(<span class="hljs-number">22</span>)<br>mylist.add(<span class="hljs-number">33</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mylist是否是可以迭代对象&quot;</span>, <span class="hljs-built_in">isinstance</span>(mylist, Iterable))<br><br><span class="hljs-keyword">for</span> temp <span class="hljs-keyword">in</span> mylist:<br>    <span class="hljs-built_in">print</span>(temp)<br><br></code></pre></td></tr></table></figure><p>运行效果：</p><p><img src="/%E8%BF%AD%E4%BB%A3%E5%99%A8/3.png"></p><p>可以看出一个类只要有<code>__iter__</code>方法，那么这个类就是可迭代对象</p><p>当我们调用<code>iter()</code>函数提取一个可迭代对象的迭代器时，实际上就会调用<code>__iter__</code>方法，并返回迭代器。</p><h3 id="4-2-next-方法"><a href="#4-2-next-方法" class="headerlink" title="4.2 __next__方法"></a>4.2 <code>__next__</code>方法</h3><p>当我们对迭代器使用<code>next()</code>函数的时候，迭代器会向我们返回它所记录位置的下一个位置的数据。</p><p>实际上，在使用<code>next()</code>函数的时候，调用的就是迭代器对象的<code>__next__</code>方法（Python3中是对象的<code>__next__</code>方法，Python2中是对象的<code>next()</code>方法）。</p><p>所以，我们要想构造一个迭代器，就要实现它的<code>__next__</code>方法。</p><p>但这还不够，python要求迭代器本身也是可迭代的，所以我们还要为迭代器实现<code>__iter__</code>方法，而<code>__iter__</code>方法要返回一个迭代器，迭代器自身正是一个迭代器，所以迭代器的<code>__iter__</code>方法返回自身即可。</p><p>一个实现了<code>__iter__</code>方法和<code>__next__</code>方法的对象，就是迭代器</p><p>我们可以通过<code>isinstance()</code>判断一个对象是否是迭代器对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">In [<span class="hljs-number">56</span>]: <span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterator<br><br>In [<span class="hljs-number">57</span>]: <span class="hljs-built_in">isinstance</span>([], Iterator)<br>Out[<span class="hljs-number">57</span>]: <span class="hljs-literal">False</span><br><br>In [<span class="hljs-number">58</span>]: <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">iter</span>([]), Iterator)<br>Out[<span class="hljs-number">58</span>]: <span class="hljs-literal">True</span><br><br>In [<span class="hljs-number">59</span>]: <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">iter</span>(<span class="hljs-string">&quot;abc&quot;</span>), Iterator)<br>Out[<span class="hljs-number">59</span>]: <span class="hljs-literal">True</span><br><br></code></pre></td></tr></table></figure><h3 id="4-3-实现一个迭代器"><a href="#4-3-实现一个迭代器" class="headerlink" title="4.3 实现一个迭代器"></a>4.3 实现一个迭代器</h3><p>此时，我们实现一个类的<code>__next__</code>方法和<code>__iter__</code>方法即可实现一个迭代器</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIterator</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.mylist = []<br>        <span class="hljs-comment"># current用来记录当前访问到的位置</span><br>        self.current = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.current &lt; <span class="hljs-built_in">len</span>(self.mylist):<br>            item = self.mylist[self.current]<br>            self.current += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> item<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> StopIteration<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, val</span>):<br>        self.mylist.append(val)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    mylist = MyIterator()<br>    mylist.add(<span class="hljs-number">1</span>)<br>    mylist.add(<span class="hljs-number">2</span>)<br>    mylist.add(<span class="hljs-number">3</span>)<br>    mylist.add(<span class="hljs-number">4</span>)<br>    mylist.add(<span class="hljs-number">5</span>)<br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> mylist:<br>        <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/%E8%BF%AD%E4%BB%A3%E5%99%A8/4.png"></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><ul><li>凡是可作用于<code>for </code>循环的对象都是<code> Iterable</code> 类型；</li><li>凡是可作用于 <code>next()</code> 函数的对象都是<code> Iterator</code> 类型</li><li>集合数据类型如<code> list</code> 、<code>dict</code>、<code>str</code>等是 <code>Iterable </code>但不是<code>Iterator</code>，不过可以通过 <code>iter() </code>函数获得一个 <code>Iterator </code>对象</li></ul>]]></content>
    
    
    <categories>
      
      <category>python高级</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>迭代器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fluid主题</title>
    <link href="/2022/05/01/Fluid%E4%B8%BB%E9%A2%98/"/>
    <url>/2022/05/01/Fluid%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="这是第一篇博客"><a href="#这是第一篇博客" class="headerlink" title="这是第一篇博客"></a>这是第一篇博客</h2><p>上周用Hexo搭了个博客，今天突发奇想换个主题，结果改配置文件的时候不知道动了哪个地方的代码，自己也没备份，直接寄，全部推倒重来，给我整麻了</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>看看能不能坚持写作，记录一下自己学到的东西</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fluid主题</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/01/hello-world/"/>
    <url>/2022/05/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
